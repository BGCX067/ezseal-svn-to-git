// Created by Microsoft (R) C/C++ Compiler Version 12.00.9782.0 (a2c7c2da).
//
// mso.tli
//
// Wrapper implementations for Win32 type library C:\\Program Files\\Common Files\\Microsoft Shared\\OFFICE11\\mso.dll
// compiler-generated file created 12/29/10 at 16:54:07 - DO NOT EDIT!


//
// interface IAccessible wrapper method implementations
//

#pragma implementation_key(1)
inline IDispatchPtr Office::IAccessible::GetaccParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_accParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2)
inline long Office::IAccessible::GetaccChildCount ( ) {
    long _result;
    HRESULT _hr = get_accChildCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3)
inline IDispatchPtr Office::IAccessible::GetaccChild ( const _variant_t & varChild ) {
    IDispatch * _result;
    HRESULT _hr = get_accChild(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4)
inline _bstr_t Office::IAccessible::GetaccName ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accName(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5)
inline _bstr_t Office::IAccessible::GetaccValue ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accValue(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6)
inline _bstr_t Office::IAccessible::GetaccDescription ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accDescription(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7)
inline _variant_t Office::IAccessible::GetaccRole ( const _variant_t & varChild ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accRole(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(8)
inline _variant_t Office::IAccessible::GetaccState ( const _variant_t & varChild ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accState(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(9)
inline _bstr_t Office::IAccessible::GetaccHelp ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accHelp(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(10)
inline long Office::IAccessible::GetaccHelpTopic ( BSTR * pszHelpFile, const _variant_t & varChild ) {
    long _result;
    HRESULT _hr = get_accHelpTopic(pszHelpFile, varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(11)
inline _bstr_t Office::IAccessible::GetaccKeyboardShortcut ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accKeyboardShortcut(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(12)
inline _variant_t Office::IAccessible::GetaccFocus ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(13)
inline _variant_t Office::IAccessible::GetaccSelection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(14)
inline _bstr_t Office::IAccessible::GetaccDefaultAction ( const _variant_t & varChild ) {
    BSTR _result;
    HRESULT _hr = get_accDefaultAction(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(15)
inline HRESULT Office::IAccessible::accSelect ( long flagsSelect, const _variant_t & varChild ) {
    HRESULT _hr = raw_accSelect(flagsSelect, varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(16)
inline HRESULT Office::IAccessible::accLocation ( long * pxLeft, long * pyTop, long * pcxWidth, long * pcyHeight, const _variant_t & varChild ) {
    HRESULT _hr = raw_accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(17)
inline _variant_t Office::IAccessible::accNavigate ( long navDir, const _variant_t & varStart ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_accNavigate(navDir, varStart, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(18)
inline _variant_t Office::IAccessible::accHitTest ( long xLeft, long yTop ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_accHitTest(xLeft, yTop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(19)
inline HRESULT Office::IAccessible::accDoDefaultAction ( const _variant_t & varChild ) {
    HRESULT _hr = raw_accDoDefaultAction(varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(20)
inline void Office::IAccessible::PutaccName ( const _variant_t & varChild, _bstr_t pszName ) {
    HRESULT _hr = put_accName(varChild, pszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(21)
inline void Office::IAccessible::PutaccValue ( const _variant_t & varChild, _bstr_t pszValue ) {
    HRESULT _hr = put_accValue(varChild, pszValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IMsoDispObj wrapper method implementations
//

#pragma implementation_key(22)
inline IDispatchPtr Office::_IMsoDispObj::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(23)
inline long Office::_IMsoDispObj::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IMsoOleAccDispObj wrapper method implementations
//

#pragma implementation_key(24)
inline IDispatchPtr Office::_IMsoOleAccDispObj::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(25)
inline long Office::_IMsoOleAccDispObj::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _CommandBars wrapper method implementations
//

#pragma implementation_key(26)
inline Office::CommandBarControlPtr Office::_CommandBars::GetActionControl ( ) {
    struct CommandBarControl * _result;
    HRESULT _hr = get_ActionControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(27)
inline Office::CommandBarPtr Office::_CommandBars::GetActiveMenuBar ( ) {
    struct CommandBar * _result;
    HRESULT _hr = get_ActiveMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(28)
inline Office::CommandBarPtr Office::_CommandBars::Add ( const _variant_t & Name, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary ) {
    struct CommandBar * _result;
    HRESULT _hr = raw_Add(Name, Position, MenuBar, Temporary, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(29)
inline int Office::_CommandBars::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline VARIANT_BOOL Office::_CommandBars::GetDisplayTooltips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(31)
inline void Office::_CommandBars::PutDisplayTooltips ( VARIANT_BOOL pvarfDisplayTooltips ) {
    HRESULT _hr = put_DisplayTooltips(pvarfDisplayTooltips);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(32)
inline VARIANT_BOOL Office::_CommandBars::GetDisplayKeysInTooltips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayKeysInTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(33)
inline void Office::_CommandBars::PutDisplayKeysInTooltips ( VARIANT_BOOL pvarfDisplayKeys ) {
    HRESULT _hr = put_DisplayKeysInTooltips(pvarfDisplayKeys);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(34)
inline Office::CommandBarControlPtr Office::_CommandBars::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible ) {
    struct CommandBarControl * _result;
    HRESULT _hr = raw_FindControl(Type, Id, Tag, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(35)
inline Office::CommandBarPtr Office::_CommandBars::GetItem ( const _variant_t & Index ) {
    struct CommandBar * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(36)
inline VARIANT_BOOL Office::_CommandBars::GetLargeButtons ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LargeButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(37)
inline void Office::_CommandBars::PutLargeButtons ( VARIANT_BOOL pvarfLargeButtons ) {
    HRESULT _hr = put_LargeButtons(pvarfLargeButtons);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(38)
inline enum MsoMenuAnimation Office::_CommandBars::GetMenuAnimationStyle ( ) {
    enum MsoMenuAnimation _result;
    HRESULT _hr = get_MenuAnimationStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(39)
inline void Office::_CommandBars::PutMenuAnimationStyle ( enum MsoMenuAnimation pma ) {
    HRESULT _hr = put_MenuAnimationStyle(pma);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(40)
inline IUnknownPtr Office::_CommandBars::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(41)
inline IDispatchPtr Office::_CommandBars::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(42)
inline HRESULT Office::_CommandBars::ReleaseFocus ( ) {
    HRESULT _hr = raw_ReleaseFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(43)
inline int Office::_CommandBars::GetIdsString ( int ids, BSTR * pbstrName ) {
    int _result;
    HRESULT _hr = get_IdsString(ids, pbstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline int Office::_CommandBars::GetTmcGetName ( int tmc, BSTR * pbstrName ) {
    int _result;
    HRESULT _hr = get_TmcGetName(tmc, pbstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(45)
inline VARIANT_BOOL Office::_CommandBars::GetAdaptiveMenus ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AdaptiveMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline void Office::_CommandBars::PutAdaptiveMenus ( VARIANT_BOOL pvarfAdaptiveMenus ) {
    HRESULT _hr = put_AdaptiveMenus(pvarfAdaptiveMenus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline Office::CommandBarControlsPtr Office::_CommandBars::FindControls ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible ) {
    struct CommandBarControls * _result;
    HRESULT _hr = raw_FindControls(Type, Id, Tag, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

#pragma implementation_key(48)
inline Office::CommandBarPtr Office::_CommandBars::AddEx ( const _variant_t & TbidOrName, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary, const _variant_t & TbtrProtection ) {
    struct CommandBar * _result;
    HRESULT _hr = raw_AddEx(TbidOrName, Position, MenuBar, Temporary, TbtrProtection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(49)
inline VARIANT_BOOL Office::_CommandBars::GetDisplayFonts ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(50)
inline void Office::_CommandBars::PutDisplayFonts ( VARIANT_BOOL pvarfDisplayFonts ) {
    HRESULT _hr = put_DisplayFonts(pvarfDisplayFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(51)
inline VARIANT_BOOL Office::_CommandBars::GetDisableCustomize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisableCustomize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(52)
inline void Office::_CommandBars::PutDisableCustomize ( VARIANT_BOOL pvarfDisableCustomize ) {
    HRESULT _hr = put_DisableCustomize(pvarfDisableCustomize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(53)
inline VARIANT_BOOL Office::_CommandBars::GetDisableAskAQuestionDropdown ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisableAskAQuestionDropdown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(54)
inline void Office::_CommandBars::PutDisableAskAQuestionDropdown ( VARIANT_BOOL pvarfDisableAskAQuestionDropdown ) {
    HRESULT _hr = put_DisableAskAQuestionDropdown(pvarfDisableAskAQuestionDropdown);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CommandBar wrapper method implementations
//

#pragma implementation_key(55)
inline VARIANT_BOOL Office::CommandBar::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(56)
inline _bstr_t Office::CommandBar::GetContext ( ) {
    BSTR _result;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(57)
inline void Office::CommandBar::PutContext ( _bstr_t pbstrContext ) {
    HRESULT _hr = put_Context(pbstrContext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(58)
inline Office::CommandBarControlsPtr Office::CommandBar::GetControls ( ) {
    struct CommandBarControls * _result;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

#pragma implementation_key(59)
inline HRESULT Office::CommandBar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(60)
inline VARIANT_BOOL Office::CommandBar::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(61)
inline void Office::CommandBar::PutEnabled ( VARIANT_BOOL pvarfEnabled ) {
    HRESULT _hr = put_Enabled(pvarfEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(62)
inline Office::CommandBarControlPtr Office::CommandBar::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible, const _variant_t & Recursive ) {
    struct CommandBarControl * _result;
    HRESULT _hr = raw_FindControl(Type, Id, Tag, Visible, Recursive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(63)
inline int Office::CommandBar::GetHeight ( ) {
    int _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(64)
inline void Office::CommandBar::PutHeight ( int pdy ) {
    HRESULT _hr = put_Height(pdy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(65)
inline int Office::CommandBar::GetIndex ( ) {
    int _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(66)
inline long Office::CommandBar::GetInstanceId ( ) {
    long _result;
    HRESULT _hr = get_InstanceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(67)
inline int Office::CommandBar::GetLeft ( ) {
    int _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(68)
inline void Office::CommandBar::PutLeft ( int pxpLeft ) {
    HRESULT _hr = put_Left(pxpLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(69)
inline _bstr_t Office::CommandBar::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(70)
inline void Office::CommandBar::PutName ( _bstr_t pbstrName ) {
    HRESULT _hr = put_Name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(71)
inline _bstr_t Office::CommandBar::GetNameLocal ( ) {
    BSTR _result;
    HRESULT _hr = get_NameLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(72)
inline void Office::CommandBar::PutNameLocal ( _bstr_t pbstrNameLocal ) {
    HRESULT _hr = put_NameLocal(pbstrNameLocal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(73)
inline IDispatchPtr Office::CommandBar::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(74)
inline enum MsoBarPosition Office::CommandBar::GetPosition ( ) {
    enum MsoBarPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(75)
inline void Office::CommandBar::PutPosition ( enum MsoBarPosition ppos ) {
    HRESULT _hr = put_Position(ppos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(76)
inline int Office::CommandBar::GetRowIndex ( ) {
    int _result;
    HRESULT _hr = get_RowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(77)
inline void Office::CommandBar::PutRowIndex ( int piRow ) {
    HRESULT _hr = put_RowIndex(piRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(78)
inline enum MsoBarProtection Office::CommandBar::GetProtection ( ) {
    enum MsoBarProtection _result;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(79)
inline void Office::CommandBar::PutProtection ( enum MsoBarProtection pprot ) {
    HRESULT _hr = put_Protection(pprot);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline HRESULT Office::CommandBar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(81)
inline HRESULT Office::CommandBar::ShowPopup ( const _variant_t & x, const _variant_t & y ) {
    HRESULT _hr = raw_ShowPopup(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(82)
inline int Office::CommandBar::GetTop ( ) {
    int _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(83)
inline void Office::CommandBar::PutTop ( int pypTop ) {
    HRESULT _hr = put_Top(pypTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(84)
inline enum MsoBarType Office::CommandBar::GetType ( ) {
    enum MsoBarType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(85)
inline VARIANT_BOOL Office::CommandBar::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(86)
inline void Office::CommandBar::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(87)
inline int Office::CommandBar::GetWidth ( ) {
    int _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(88)
inline void Office::CommandBar::PutWidth ( int pdx ) {
    HRESULT _hr = put_Width(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(89)
inline VARIANT_BOOL Office::CommandBar::GetAdaptiveMenu ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AdaptiveMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(90)
inline void Office::CommandBar::PutAdaptiveMenu ( VARIANT_BOOL pvarfAdaptiveMenu ) {
    HRESULT _hr = put_AdaptiveMenu(pvarfAdaptiveMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(91)
inline int Office::CommandBar::GetId ( ) {
    int _result;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CommandBarControls wrapper method implementations
//

#pragma implementation_key(92)
inline Office::CommandBarControlPtr Office::CommandBarControls::Add ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Parameter, const _variant_t & Before, const _variant_t & Temporary ) {
    struct CommandBarControl * _result;
    HRESULT _hr = raw_Add(Type, Id, Parameter, Before, Temporary, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(93)
inline int Office::CommandBarControls::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline Office::CommandBarControlPtr Office::CommandBarControls::GetItem ( const _variant_t & Index ) {
    struct CommandBarControl * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(95)
inline IUnknownPtr Office::CommandBarControls::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(96)
inline Office::CommandBarPtr Office::CommandBarControls::GetParent ( ) {
    struct CommandBar * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

//
// interface CommandBarControl wrapper method implementations
//

#pragma implementation_key(97)
inline VARIANT_BOOL Office::CommandBarControl::GetBeginGroup ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BeginGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(98)
inline void Office::CommandBarControl::PutBeginGroup ( VARIANT_BOOL pvarfBeginGroup ) {
    HRESULT _hr = put_BeginGroup(pvarfBeginGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(99)
inline VARIANT_BOOL Office::CommandBarControl::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(100)
inline _bstr_t Office::CommandBarControl::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(101)
inline void Office::CommandBarControl::PutCaption ( _bstr_t pbstrCaption ) {
    HRESULT _hr = put_Caption(pbstrCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline IDispatchPtr Office::CommandBarControl::GetControl ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Control(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(103)
inline Office::CommandBarControlPtr Office::CommandBarControl::Copy ( const _variant_t & Bar, const _variant_t & Before ) {
    struct CommandBarControl * _result;
    HRESULT _hr = raw_Copy(Bar, Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(104)
inline HRESULT Office::CommandBarControl::Delete ( const _variant_t & Temporary ) {
    HRESULT _hr = raw_Delete(Temporary);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(105)
inline _bstr_t Office::CommandBarControl::GetDescriptionText ( ) {
    BSTR _result;
    HRESULT _hr = get_DescriptionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(106)
inline void Office::CommandBarControl::PutDescriptionText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_DescriptionText(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(107)
inline VARIANT_BOOL Office::CommandBarControl::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(108)
inline void Office::CommandBarControl::PutEnabled ( VARIANT_BOOL pvarfEnabled ) {
    HRESULT _hr = put_Enabled(pvarfEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(109)
inline HRESULT Office::CommandBarControl::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(110)
inline int Office::CommandBarControl::GetHeight ( ) {
    int _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(111)
inline void Office::CommandBarControl::PutHeight ( int pdy ) {
    HRESULT _hr = put_Height(pdy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(112)
inline int Office::CommandBarControl::GetHelpContextId ( ) {
    int _result;
    HRESULT _hr = get_HelpContextId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(113)
inline void Office::CommandBarControl::PutHelpContextId ( int pid ) {
    HRESULT _hr = put_HelpContextId(pid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(114)
inline _bstr_t Office::CommandBarControl::GetHelpFile ( ) {
    BSTR _result;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(115)
inline void Office::CommandBarControl::PutHelpFile ( _bstr_t pbstrFilename ) {
    HRESULT _hr = put_HelpFile(pbstrFilename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(116)
inline int Office::CommandBarControl::GetId ( ) {
    int _result;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(117)
inline int Office::CommandBarControl::GetIndex ( ) {
    int _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(118)
inline long Office::CommandBarControl::GetInstanceId ( ) {
    long _result;
    HRESULT _hr = get_InstanceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(119)
inline Office::CommandBarControlPtr Office::CommandBarControl::Move ( const _variant_t & Bar, const _variant_t & Before ) {
    struct CommandBarControl * _result;
    HRESULT _hr = raw_Move(Bar, Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(120)
inline int Office::CommandBarControl::GetLeft ( ) {
    int _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(121)
inline enum MsoControlOLEUsage Office::CommandBarControl::GetOLEUsage ( ) {
    enum MsoControlOLEUsage _result;
    HRESULT _hr = get_OLEUsage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(122)
inline void Office::CommandBarControl::PutOLEUsage ( enum MsoControlOLEUsage pcou ) {
    HRESULT _hr = put_OLEUsage(pcou);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(123)
inline _bstr_t Office::CommandBarControl::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(124)
inline void Office::CommandBarControl::PutOnAction ( _bstr_t pbstrOnAction ) {
    HRESULT _hr = put_OnAction(pbstrOnAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(125)
inline Office::CommandBarPtr Office::CommandBarControl::GetParent ( ) {
    struct CommandBar * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(126)
inline _bstr_t Office::CommandBarControl::GetParameter ( ) {
    BSTR _result;
    HRESULT _hr = get_Parameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(127)
inline void Office::CommandBarControl::PutParameter ( _bstr_t pbstrParam ) {
    HRESULT _hr = put_Parameter(pbstrParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(128)
inline int Office::CommandBarControl::GetPriority ( ) {
    int _result;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline void Office::CommandBarControl::PutPriority ( int pnPri ) {
    HRESULT _hr = put_Priority(pnPri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(130)
inline HRESULT Office::CommandBarControl::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(131)
inline HRESULT Office::CommandBarControl::SetFocus ( ) {
    HRESULT _hr = raw_SetFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(132)
inline _bstr_t Office::CommandBarControl::GetTag ( ) {
    BSTR _result;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(133)
inline void Office::CommandBarControl::PutTag ( _bstr_t pbstrTag ) {
    HRESULT _hr = put_Tag(pbstrTag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(134)
inline _bstr_t Office::CommandBarControl::GetTooltipText ( ) {
    BSTR _result;
    HRESULT _hr = get_TooltipText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(135)
inline void Office::CommandBarControl::PutTooltipText ( _bstr_t pbstrTooltip ) {
    HRESULT _hr = put_TooltipText(pbstrTooltip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(136)
inline int Office::CommandBarControl::GetTop ( ) {
    int _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(137)
inline enum MsoControlType Office::CommandBarControl::GetType ( ) {
    enum MsoControlType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(138)
inline VARIANT_BOOL Office::CommandBarControl::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(139)
inline void Office::CommandBarControl::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(140)
inline int Office::CommandBarControl::GetWidth ( ) {
    int _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(141)
inline void Office::CommandBarControl::PutWidth ( int pdx ) {
    HRESULT _hr = put_Width(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(142)
inline VARIANT_BOOL Office::CommandBarControl::GetIsPriorityDropped ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsPriorityDropped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(143)
inline HRESULT Office::CommandBarControl::Reserved1 ( ) {
    HRESULT _hr = raw_Reserved1();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(144)
inline HRESULT Office::CommandBarControl::Reserved2 ( ) {
    HRESULT _hr = raw_Reserved2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(145)
inline HRESULT Office::CommandBarControl::Reserved3 ( ) {
    HRESULT _hr = raw_Reserved3();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(146)
inline HRESULT Office::CommandBarControl::Reserved4 ( ) {
    HRESULT _hr = raw_Reserved4();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(147)
inline HRESULT Office::CommandBarControl::Reserved5 ( ) {
    HRESULT _hr = raw_Reserved5();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(148)
inline HRESULT Office::CommandBarControl::Reserved6 ( ) {
    HRESULT _hr = raw_Reserved6();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(149)
inline HRESULT Office::CommandBarControl::Reserved7 ( ) {
    HRESULT _hr = raw_Reserved7();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _CommandBarButton wrapper method implementations
//

#pragma implementation_key(150)
inline VARIANT_BOOL Office::_CommandBarButton::GetBuiltInFace ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltInFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(151)
inline void Office::_CommandBarButton::PutBuiltInFace ( VARIANT_BOOL pvarfBuiltIn ) {
    HRESULT _hr = put_BuiltInFace(pvarfBuiltIn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(152)
inline HRESULT Office::_CommandBarButton::CopyFace ( ) {
    HRESULT _hr = raw_CopyFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(153)
inline int Office::_CommandBarButton::GetFaceId ( ) {
    int _result;
    HRESULT _hr = get_FaceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(154)
inline void Office::_CommandBarButton::PutFaceId ( int pid ) {
    HRESULT _hr = put_FaceId(pid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(155)
inline HRESULT Office::_CommandBarButton::PasteFace ( ) {
    HRESULT _hr = raw_PasteFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(156)
inline _bstr_t Office::_CommandBarButton::GetShortcutText ( ) {
    BSTR _result;
    HRESULT _hr = get_ShortcutText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(157)
inline void Office::_CommandBarButton::PutShortcutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_ShortcutText(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline enum MsoButtonState Office::_CommandBarButton::GetState ( ) {
    enum MsoButtonState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline void Office::_CommandBarButton::PutState ( enum MsoButtonState pstate ) {
    HRESULT _hr = put_State(pstate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline enum MsoButtonStyle Office::_CommandBarButton::GetStyle ( ) {
    enum MsoButtonStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(161)
inline void Office::_CommandBarButton::PutStyle ( enum MsoButtonStyle pstyle ) {
    HRESULT _hr = put_Style(pstyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(162)
inline enum MsoCommandBarButtonHyperlinkType Office::_CommandBarButton::GetHyperlinkType ( ) {
    enum MsoCommandBarButtonHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void Office::_CommandBarButton::PutHyperlinkType ( enum MsoCommandBarButtonHyperlinkType phlType ) {
    HRESULT _hr = put_HyperlinkType(phlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline IPictureDisp * Office::_CommandBarButton::GetPicture ( ) {
    IPictureDisp * _result;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline void Office::_CommandBarButton::PutPicture ( IPictureDisp * ppdispPicture ) {
    HRESULT _hr = put_Picture(ppdispPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline IPictureDisp * Office::_CommandBarButton::GetMask ( ) {
    IPictureDisp * _result;
    HRESULT _hr = get_Mask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void Office::_CommandBarButton::PutMask ( IPictureDisp * ppipictdispMask ) {
    HRESULT _hr = put_Mask(ppipictdispMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CommandBarPopup wrapper method implementations
//

#pragma implementation_key(168)
inline Office::CommandBarPtr Office::CommandBarPopup::GetCommandBar ( ) {
    struct CommandBar * _result;
    HRESULT _hr = get_CommandBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(169)
inline Office::CommandBarControlsPtr Office::CommandBarPopup::GetControls ( ) {
    struct CommandBarControls * _result;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

#pragma implementation_key(170)
inline enum MsoOLEMenuGroup Office::CommandBarPopup::GetOLEMenuGroup ( ) {
    enum MsoOLEMenuGroup _result;
    HRESULT _hr = get_OLEMenuGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(171)
inline void Office::CommandBarPopup::PutOLEMenuGroup ( enum MsoOLEMenuGroup pomg ) {
    HRESULT _hr = put_OLEMenuGroup(pomg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _CommandBarComboBox wrapper method implementations
//

#pragma implementation_key(172)
inline HRESULT Office::_CommandBarComboBox::AddItem ( _bstr_t Text, const _variant_t & Index ) {
    HRESULT _hr = raw_AddItem(Text, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(173)
inline HRESULT Office::_CommandBarComboBox::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(174)
inline int Office::_CommandBarComboBox::GetDropDownLines ( ) {
    int _result;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(175)
inline void Office::_CommandBarComboBox::PutDropDownLines ( int pcLines ) {
    HRESULT _hr = put_DropDownLines(pcLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(176)
inline int Office::_CommandBarComboBox::GetDropDownWidth ( ) {
    int _result;
    HRESULT _hr = get_DropDownWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(177)
inline void Office::_CommandBarComboBox::PutDropDownWidth ( int pdx ) {
    HRESULT _hr = put_DropDownWidth(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(178)
inline _bstr_t Office::_CommandBarComboBox::GetList ( int Index ) {
    BSTR _result;
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(179)
inline void Office::_CommandBarComboBox::PutList ( int Index, _bstr_t pbstrItem ) {
    HRESULT _hr = put_List(Index, pbstrItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(180)
inline int Office::_CommandBarComboBox::GetListCount ( ) {
    int _result;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(181)
inline int Office::_CommandBarComboBox::GetListHeaderCount ( ) {
    int _result;
    HRESULT _hr = get_ListHeaderCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(182)
inline void Office::_CommandBarComboBox::PutListHeaderCount ( int pcItems ) {
    HRESULT _hr = put_ListHeaderCount(pcItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(183)
inline int Office::_CommandBarComboBox::GetListIndex ( ) {
    int _result;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(184)
inline void Office::_CommandBarComboBox::PutListIndex ( int pi ) {
    HRESULT _hr = put_ListIndex(pi);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(185)
inline HRESULT Office::_CommandBarComboBox::RemoveItem ( int Index ) {
    HRESULT _hr = raw_RemoveItem(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(186)
inline enum MsoComboStyle Office::_CommandBarComboBox::GetStyle ( ) {
    enum MsoComboStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(187)
inline void Office::_CommandBarComboBox::PutStyle ( enum MsoComboStyle pstyle ) {
    HRESULT _hr = put_Style(pstyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(188)
inline _bstr_t Office::_CommandBarComboBox::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(189)
inline void Office::_CommandBarComboBox::PutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_Text(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _CommandBarActiveX wrapper method implementations
//

#pragma implementation_key(190)
inline _bstr_t Office::_CommandBarActiveX::GetControlCLSID ( ) {
    BSTR _result;
    HRESULT _hr = get_ControlCLSID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(191)
inline void Office::_CommandBarActiveX::PutControlCLSID ( _bstr_t pbstrClsid ) {
    HRESULT _hr = put_ControlCLSID(pbstrClsid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(192)
inline IUnknownPtr Office::_CommandBarActiveX::GetQueryControlInterface ( _bstr_t bstrIid ) {
    IUnknown * _result;
    HRESULT _hr = get_QueryControlInterface(bstrIid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(193)
inline HRESULT Office::_CommandBarActiveX::SetInnerObjectFactory ( IUnknown * pUnk ) {
    HRESULT _hr = raw_SetInnerObjectFactory(pUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(194)
inline HRESULT Office::_CommandBarActiveX::EnsureControl ( ) {
    HRESULT _hr = raw_EnsureControl();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(195)
inline void Office::_CommandBarActiveX::PutInitWith ( IUnknown * _arg1 ) {
    HRESULT _hr = put_InitWith(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Adjustments wrapper method implementations
//

#pragma implementation_key(196)
inline IDispatchPtr Office::Adjustments::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(197)
inline int Office::Adjustments::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(198)
inline float Office::Adjustments::GetItem ( int Index ) {
    float _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline void Office::Adjustments::PutItem ( int Index, float Val ) {
    HRESULT _hr = put_Item(Index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

#pragma implementation_key(200)
inline IDispatchPtr Office::CalloutFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(201)
inline HRESULT Office::CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(202)
inline HRESULT Office::CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(203)
inline HRESULT Office::CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(204)
inline HRESULT Office::CalloutFormat::PresetDrop ( enum MsoCalloutDropType DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(205)
inline enum MsoTriState Office::CalloutFormat::GetAccent ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline void Office::CalloutFormat::PutAccent ( enum MsoTriState Accent ) {
    HRESULT _hr = put_Accent(Accent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(207)
inline enum MsoCalloutAngleType Office::CalloutFormat::GetAngle ( ) {
    enum MsoCalloutAngleType _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(208)
inline void Office::CalloutFormat::PutAngle ( enum MsoCalloutAngleType Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(209)
inline enum MsoTriState Office::CalloutFormat::GetAutoAttach ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(210)
inline void Office::CalloutFormat::PutAutoAttach ( enum MsoTriState AutoAttach ) {
    HRESULT _hr = put_AutoAttach(AutoAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(211)
inline enum MsoTriState Office::CalloutFormat::GetAutoLength ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(212)
inline enum MsoTriState Office::CalloutFormat::GetBorder ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline void Office::CalloutFormat::PutBorder ( enum MsoTriState Border ) {
    HRESULT _hr = put_Border(Border);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(214)
inline float Office::CalloutFormat::GetDrop ( ) {
    float _result;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(215)
inline enum MsoCalloutDropType Office::CalloutFormat::GetDropType ( ) {
    enum MsoCalloutDropType _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(216)
inline float Office::CalloutFormat::GetGap ( ) {
    float _result;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(217)
inline void Office::CalloutFormat::PutGap ( float Gap ) {
    HRESULT _hr = put_Gap(Gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(218)
inline float Office::CalloutFormat::GetLength ( ) {
    float _result;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(219)
inline enum MsoCalloutType Office::CalloutFormat::GetType ( ) {
    enum MsoCalloutType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(220)
inline void Office::CalloutFormat::PutType ( enum MsoCalloutType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorFormat wrapper method implementations
//

#pragma implementation_key(221)
inline IDispatchPtr Office::ColorFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(222)
inline MsoRGBType Office::ColorFormat::GetRGB ( ) {
    MsoRGBType _result;
    HRESULT _hr = get_RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(223)
inline void Office::ColorFormat::PutRGB ( MsoRGBType RGB ) {
    HRESULT _hr = put_RGB(RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(224)
inline int Office::ColorFormat::GetSchemeColor ( ) {
    int _result;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(225)
inline void Office::ColorFormat::PutSchemeColor ( int SchemeColor ) {
    HRESULT _hr = put_SchemeColor(SchemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(226)
inline enum MsoColorType Office::ColorFormat::GetType ( ) {
    enum MsoColorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(227)
inline float Office::ColorFormat::GetTintAndShade ( ) {
    float _result;
    HRESULT _hr = get_TintAndShade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(228)
inline void Office::ColorFormat::PutTintAndShade ( float pValue ) {
    HRESULT _hr = put_TintAndShade(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ConnectorFormat wrapper method implementations
//

#pragma implementation_key(229)
inline IDispatchPtr Office::ConnectorFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(230)
inline HRESULT Office::ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(231)
inline HRESULT Office::ConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(232)
inline HRESULT Office::ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(233)
inline HRESULT Office::ConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(234)
inline enum MsoTriState Office::ConnectorFormat::GetBeginConnected ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(235)
inline Office::ShapePtr Office::ConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(236)
inline int Office::ConnectorFormat::GetBeginConnectionSite ( ) {
    int _result;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(237)
inline enum MsoTriState Office::ConnectorFormat::GetEndConnected ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(238)
inline Office::ShapePtr Office::ConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(239)
inline int Office::ConnectorFormat::GetEndConnectionSite ( ) {
    int _result;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(240)
inline enum MsoConnectorType Office::ConnectorFormat::GetType ( ) {
    enum MsoConnectorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(241)
inline void Office::ConnectorFormat::PutType ( enum MsoConnectorType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FillFormat wrapper method implementations
//

#pragma implementation_key(242)
inline IDispatchPtr Office::FillFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(243)
inline HRESULT Office::FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(244)
inline HRESULT Office::FillFormat::OneColorGradient ( enum MsoGradientStyle Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(245)
inline HRESULT Office::FillFormat::Patterned ( enum MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(246)
inline HRESULT Office::FillFormat::PresetGradient ( enum MsoGradientStyle Style, int Variant, enum MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(247)
inline HRESULT Office::FillFormat::PresetTextured ( enum MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(248)
inline HRESULT Office::FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(249)
inline HRESULT Office::FillFormat::TwoColorGradient ( enum MsoGradientStyle Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(250)
inline HRESULT Office::FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(251)
inline HRESULT Office::FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(252)
inline Office::ColorFormatPtr Office::FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(253)
inline void Office::FillFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline Office::ColorFormatPtr Office::FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(255)
inline void Office::FillFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline enum MsoGradientColorType Office::FillFormat::GetGradientColorType ( ) {
    enum MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline float Office::FillFormat::GetGradientDegree ( ) {
    float _result;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(258)
inline enum MsoGradientStyle Office::FillFormat::GetGradientStyle ( ) {
    enum MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(259)
inline int Office::FillFormat::GetGradientVariant ( ) {
    int _result;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(260)
inline enum MsoPatternType Office::FillFormat::GetPattern ( ) {
    enum MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline enum MsoPresetGradientType Office::FillFormat::GetPresetGradientType ( ) {
    enum MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(262)
inline enum MsoPresetTexture Office::FillFormat::GetPresetTexture ( ) {
    enum MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(263)
inline _bstr_t Office::FillFormat::GetTextureName ( ) {
    BSTR _result;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(264)
inline enum MsoTextureType Office::FillFormat::GetTextureType ( ) {
    enum MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(265)
inline float Office::FillFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(266)
inline void Office::FillFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(267)
inline enum MsoFillType Office::FillFormat::GetType ( ) {
    enum MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(268)
inline enum MsoTriState Office::FillFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(269)
inline void Office::FillFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FreeformBuilder wrapper method implementations
//

#pragma implementation_key(270)
inline IDispatchPtr Office::FreeformBuilder::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(271)
inline HRESULT Office::FreeformBuilder::AddNodes ( enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(272)
inline Office::ShapePtr Office::FreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface GroupShapes wrapper method implementations
//

#pragma implementation_key(273)
inline IDispatchPtr Office::GroupShapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(274)
inline int Office::GroupShapes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline Office::ShapePtr Office::GroupShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(276)
inline IUnknownPtr Office::GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(277)
inline Office::ShapeRangePtr Office::GroupShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

//
// interface LineFormat wrapper method implementations
//

#pragma implementation_key(278)
inline IDispatchPtr Office::LineFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(279)
inline Office::ColorFormatPtr Office::LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(280)
inline void Office::LineFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(281)
inline enum MsoArrowheadLength Office::LineFormat::GetBeginArrowheadLength ( ) {
    enum MsoArrowheadLength _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(282)
inline void Office::LineFormat::PutBeginArrowheadLength ( enum MsoArrowheadLength BeginArrowheadLength ) {
    HRESULT _hr = put_BeginArrowheadLength(BeginArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(283)
inline enum MsoArrowheadStyle Office::LineFormat::GetBeginArrowheadStyle ( ) {
    enum MsoArrowheadStyle _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline void Office::LineFormat::PutBeginArrowheadStyle ( enum MsoArrowheadStyle BeginArrowheadStyle ) {
    HRESULT _hr = put_BeginArrowheadStyle(BeginArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(285)
inline enum MsoArrowheadWidth Office::LineFormat::GetBeginArrowheadWidth ( ) {
    enum MsoArrowheadWidth _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline void Office::LineFormat::PutBeginArrowheadWidth ( enum MsoArrowheadWidth BeginArrowheadWidth ) {
    HRESULT _hr = put_BeginArrowheadWidth(BeginArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(287)
inline enum MsoLineDashStyle Office::LineFormat::GetDashStyle ( ) {
    enum MsoLineDashStyle _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline void Office::LineFormat::PutDashStyle ( enum MsoLineDashStyle DashStyle ) {
    HRESULT _hr = put_DashStyle(DashStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(289)
inline enum MsoArrowheadLength Office::LineFormat::GetEndArrowheadLength ( ) {
    enum MsoArrowheadLength _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline void Office::LineFormat::PutEndArrowheadLength ( enum MsoArrowheadLength EndArrowheadLength ) {
    HRESULT _hr = put_EndArrowheadLength(EndArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(291)
inline enum MsoArrowheadStyle Office::LineFormat::GetEndArrowheadStyle ( ) {
    enum MsoArrowheadStyle _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline void Office::LineFormat::PutEndArrowheadStyle ( enum MsoArrowheadStyle EndArrowheadStyle ) {
    HRESULT _hr = put_EndArrowheadStyle(EndArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(293)
inline enum MsoArrowheadWidth Office::LineFormat::GetEndArrowheadWidth ( ) {
    enum MsoArrowheadWidth _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline void Office::LineFormat::PutEndArrowheadWidth ( enum MsoArrowheadWidth EndArrowheadWidth ) {
    HRESULT _hr = put_EndArrowheadWidth(EndArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(295)
inline Office::ColorFormatPtr Office::LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(296)
inline void Office::LineFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(297)
inline enum MsoPatternType Office::LineFormat::GetPattern ( ) {
    enum MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline void Office::LineFormat::PutPattern ( enum MsoPatternType Pattern ) {
    HRESULT _hr = put_Pattern(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(299)
inline enum MsoLineStyle Office::LineFormat::GetStyle ( ) {
    enum MsoLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(300)
inline void Office::LineFormat::PutStyle ( enum MsoLineStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(301)
inline float Office::LineFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(302)
inline void Office::LineFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(303)
inline enum MsoTriState Office::LineFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline void Office::LineFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(305)
inline float Office::LineFormat::GetWeight ( ) {
    float _result;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline void Office::LineFormat::PutWeight ( float Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(307)
inline enum MsoTriState Office::LineFormat::GetInsetPen ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_InsetPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline void Office::LineFormat::PutInsetPen ( enum MsoTriState InsetPen ) {
    HRESULT _hr = put_InsetPen(InsetPen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeNode wrapper method implementations
//

#pragma implementation_key(309)
inline IDispatchPtr Office::ShapeNode::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(310)
inline enum MsoEditingType Office::ShapeNode::GetEditingType ( ) {
    enum MsoEditingType _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline _variant_t Office::ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(312)
inline enum MsoSegmentType Office::ShapeNode::GetSegmentType ( ) {
    enum MsoSegmentType _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

#pragma implementation_key(313)
inline IDispatchPtr Office::ShapeNodes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(314)
inline int Office::ShapeNodes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(315)
inline Office::ShapeNodePtr Office::ShapeNodes::Item ( const _variant_t & Index ) {
    struct ShapeNode * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

#pragma implementation_key(316)
inline IUnknownPtr Office::ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(317)
inline HRESULT Office::ShapeNodes::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(318)
inline HRESULT Office::ShapeNodes::Insert ( int Index, enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(319)
inline HRESULT Office::ShapeNodes::SetEditingType ( int Index, enum MsoEditingType EditingType ) {
    HRESULT _hr = raw_SetEditingType(Index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(320)
inline HRESULT Office::ShapeNodes::SetPosition ( int Index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(Index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(321)
inline HRESULT Office::ShapeNodes::SetSegmentType ( int Index, enum MsoSegmentType SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(Index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PictureFormat wrapper method implementations
//

#pragma implementation_key(322)
inline IDispatchPtr Office::PictureFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(323)
inline HRESULT Office::PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(324)
inline HRESULT Office::PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(325)
inline float Office::PictureFormat::GetBrightness ( ) {
    float _result;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(326)
inline void Office::PictureFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline enum MsoPictureColorType Office::PictureFormat::GetColorType ( ) {
    enum MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline void Office::PictureFormat::PutColorType ( enum MsoPictureColorType ColorType ) {
    HRESULT _hr = put_ColorType(ColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(329)
inline float Office::PictureFormat::GetContrast ( ) {
    float _result;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(330)
inline void Office::PictureFormat::PutContrast ( float Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(331)
inline float Office::PictureFormat::GetCropBottom ( ) {
    float _result;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(332)
inline void Office::PictureFormat::PutCropBottom ( float CropBottom ) {
    HRESULT _hr = put_CropBottom(CropBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(333)
inline float Office::PictureFormat::GetCropLeft ( ) {
    float _result;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(334)
inline void Office::PictureFormat::PutCropLeft ( float CropLeft ) {
    HRESULT _hr = put_CropLeft(CropLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(335)
inline float Office::PictureFormat::GetCropRight ( ) {
    float _result;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(336)
inline void Office::PictureFormat::PutCropRight ( float CropRight ) {
    HRESULT _hr = put_CropRight(CropRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(337)
inline float Office::PictureFormat::GetCropTop ( ) {
    float _result;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(338)
inline void Office::PictureFormat::PutCropTop ( float CropTop ) {
    HRESULT _hr = put_CropTop(CropTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(339)
inline MsoRGBType Office::PictureFormat::GetTransparencyColor ( ) {
    MsoRGBType _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(340)
inline void Office::PictureFormat::PutTransparencyColor ( MsoRGBType TransparencyColor ) {
    HRESULT _hr = put_TransparencyColor(TransparencyColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(341)
inline enum MsoTriState Office::PictureFormat::GetTransparentBackground ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(342)
inline void Office::PictureFormat::PutTransparentBackground ( enum MsoTriState TransparentBackground ) {
    HRESULT _hr = put_TransparentBackground(TransparentBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShadowFormat wrapper method implementations
//

#pragma implementation_key(343)
inline IDispatchPtr Office::ShadowFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(344)
inline HRESULT Office::ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(345)
inline HRESULT Office::ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(346)
inline Office::ColorFormatPtr Office::ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(347)
inline void Office::ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(348)
inline enum MsoTriState Office::ShadowFormat::GetObscured ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(349)
inline void Office::ShadowFormat::PutObscured ( enum MsoTriState Obscured ) {
    HRESULT _hr = put_Obscured(Obscured);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(350)
inline float Office::ShadowFormat::GetOffsetX ( ) {
    float _result;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline void Office::ShadowFormat::PutOffsetX ( float OffsetX ) {
    HRESULT _hr = put_OffsetX(OffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(352)
inline float Office::ShadowFormat::GetOffsetY ( ) {
    float _result;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(353)
inline void Office::ShadowFormat::PutOffsetY ( float OffsetY ) {
    HRESULT _hr = put_OffsetY(OffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(354)
inline float Office::ShadowFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(355)
inline void Office::ShadowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(356)
inline enum MsoShadowType Office::ShadowFormat::GetType ( ) {
    enum MsoShadowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(357)
inline void Office::ShadowFormat::PutType ( enum MsoShadowType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(358)
inline enum MsoTriState Office::ShadowFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(359)
inline void Office::ShadowFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Script wrapper method implementations
//

#pragma implementation_key(360)
inline IDispatchPtr Office::Script::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(361)
inline _bstr_t Office::Script::GetExtended ( ) {
    BSTR _result;
    HRESULT _hr = get_Extended(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(362)
inline void Office::Script::PutExtended ( _bstr_t Extended ) {
    HRESULT _hr = put_Extended(Extended);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(363)
inline _bstr_t Office::Script::GetId ( ) {
    BSTR _result;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(364)
inline void Office::Script::PutId ( _bstr_t Id ) {
    HRESULT _hr = put_Id(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(365)
inline enum MsoScriptLanguage Office::Script::GetLanguage ( ) {
    enum MsoScriptLanguage _result;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(366)
inline void Office::Script::PutLanguage ( enum MsoScriptLanguage Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(367)
inline enum MsoScriptLocation Office::Script::GetLocation ( ) {
    enum MsoScriptLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(368)
inline HRESULT Office::Script::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(369)
inline IDispatchPtr Office::Script::GetShape ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(370)
inline _bstr_t Office::Script::GetScriptText ( ) {
    BSTR _result;
    HRESULT _hr = get_ScriptText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(371)
inline void Office::Script::PutScriptText ( _bstr_t Script ) {
    HRESULT _hr = put_ScriptText(Script);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Scripts wrapper method implementations
//

#pragma implementation_key(372)
inline IDispatchPtr Office::Scripts::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(373)
inline long Office::Scripts::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline IUnknownPtr Office::Scripts::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(375)
inline Office::ScriptPtr Office::Scripts::Item ( const _variant_t & Index ) {
    struct Script * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(376)
inline Office::ScriptPtr Office::Scripts::Add ( IDispatch * Anchor, enum MsoScriptLocation Location, enum MsoScriptLanguage Language, _bstr_t Id, _bstr_t Extended, _bstr_t ScriptText ) {
    struct Script * _result;
    HRESULT _hr = raw_Add(Anchor, Location, Language, Id, Extended, ScriptText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(377)
inline HRESULT Office::Scripts::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Shape wrapper method implementations
//

#pragma implementation_key(378)
inline IDispatchPtr Office::Shape::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(379)
inline HRESULT Office::Shape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(380)
inline HRESULT Office::Shape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(381)
inline Office::ShapePtr Office::Shape::Duplicate ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(382)
inline HRESULT Office::Shape::Flip ( enum MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(383)
inline HRESULT Office::Shape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(384)
inline HRESULT Office::Shape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(385)
inline HRESULT Office::Shape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(386)
inline HRESULT Office::Shape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(387)
inline HRESULT Office::Shape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(388)
inline HRESULT Office::Shape::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(389)
inline HRESULT Office::Shape::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(390)
inline HRESULT Office::Shape::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(391)
inline HRESULT Office::Shape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(392)
inline Office::ShapeRangePtr Office::Shape::Ungroup ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(393)
inline HRESULT Office::Shape::ZOrder ( enum MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(394)
inline Office::AdjustmentsPtr Office::Shape::GetAdjustments ( ) {
    struct Adjustments * _result;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(395)
inline enum MsoAutoShapeType Office::Shape::GetAutoShapeType ( ) {
    enum MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(396)
inline void Office::Shape::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(397)
inline enum MsoBlackWhiteMode Office::Shape::GetBlackWhiteMode ( ) {
    enum MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(398)
inline void Office::Shape::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(399)
inline Office::CalloutFormatPtr Office::Shape::GetCallout ( ) {
    struct CalloutFormat * _result;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(400)
inline int Office::Shape::GetConnectionSiteCount ( ) {
    int _result;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(401)
inline enum MsoTriState Office::Shape::GetConnector ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(402)
inline Office::ConnectorFormatPtr Office::Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(403)
inline Office::FillFormatPtr Office::Shape::GetFill ( ) {
    struct FillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(404)
inline Office::GroupShapesPtr Office::Shape::GetGroupItems ( ) {
    struct GroupShapes * _result;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(405)
inline float Office::Shape::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(406)
inline void Office::Shape::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(407)
inline enum MsoTriState Office::Shape::GetHorizontalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(408)
inline float Office::Shape::GetLeft ( ) {
    float _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline void Office::Shape::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline Office::LineFormatPtr Office::Shape::GetLine ( ) {
    struct LineFormat * _result;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(411)
inline enum MsoTriState Office::Shape::GetLockAspectRatio ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(412)
inline void Office::Shape::PutLockAspectRatio ( enum MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(413)
inline _bstr_t Office::Shape::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(414)
inline void Office::Shape::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(415)
inline Office::ShapeNodesPtr Office::Shape::GetNodes ( ) {
    struct ShapeNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(416)
inline float Office::Shape::GetRotation ( ) {
    float _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(417)
inline void Office::Shape::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline Office::PictureFormatPtr Office::Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(419)
inline Office::ShadowFormatPtr Office::Shape::GetShadow ( ) {
    struct ShadowFormat * _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(420)
inline Office::TextEffectFormatPtr Office::Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(421)
inline Office::TextFramePtr Office::Shape::GetTextFrame ( ) {
    struct TextFrame * _result;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(422)
inline Office::ThreeDFormatPtr Office::Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(423)
inline float Office::Shape::GetTop ( ) {
    float _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(424)
inline void Office::Shape::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(425)
inline enum MsoShapeType Office::Shape::GetType ( ) {
    enum MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(426)
inline enum MsoTriState Office::Shape::GetVerticalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(427)
inline _variant_t Office::Shape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(428)
inline enum MsoTriState Office::Shape::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline void Office::Shape::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(430)
inline float Office::Shape::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline void Office::Shape::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(432)
inline int Office::Shape::GetZOrderPosition ( ) {
    int _result;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(433)
inline Office::ScriptPtr Office::Shape::GetScript ( ) {
    struct Script * _result;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(434)
inline _bstr_t Office::Shape::GetAlternativeText ( ) {
    BSTR _result;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(435)
inline void Office::Shape::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(436)
inline enum MsoTriState Office::Shape::GetHasDiagram ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(437)
inline Office::IMsoDiagramPtr Office::Shape::GetDiagram ( ) {
    struct IMsoDiagram * _result;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDiagramPtr(_result, false);
}

#pragma implementation_key(438)
inline enum MsoTriState Office::Shape::GetHasDiagramNode ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(439)
inline Office::DiagramNodePtr Office::Shape::GetDiagramNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(440)
inline enum MsoTriState Office::Shape::GetChild ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(441)
inline Office::ShapePtr Office::Shape::GetParentGroup ( ) {
    struct Shape * _result;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(442)
inline Office::CanvasShapesPtr Office::Shape::GetCanvasItems ( ) {
    struct CanvasShapes * _result;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

#pragma implementation_key(443)
inline int Office::Shape::GetId ( ) {
    int _result;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(444)
inline HRESULT Office::Shape::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(445)
inline HRESULT Office::Shape::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(446)
inline HRESULT Office::Shape::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(447)
inline HRESULT Office::Shape::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(448)
inline void Office::Shape::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeRange wrapper method implementations
//

#pragma implementation_key(449)
inline IDispatchPtr Office::ShapeRange::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(450)
inline int Office::ShapeRange::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline Office::ShapePtr Office::ShapeRange::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(452)
inline IUnknownPtr Office::ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(453)
inline HRESULT Office::ShapeRange::Align ( enum MsoAlignCmd AlignCmd, enum MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Align(AlignCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(454)
inline HRESULT Office::ShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(455)
inline HRESULT Office::ShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(456)
inline HRESULT Office::ShapeRange::Distribute ( enum MsoDistributeCmd DistributeCmd, enum MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Distribute(DistributeCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(457)
inline Office::ShapeRangePtr Office::ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(458)
inline HRESULT Office::ShapeRange::Flip ( enum MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(459)
inline HRESULT Office::ShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(460)
inline HRESULT Office::ShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(461)
inline HRESULT Office::ShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(462)
inline Office::ShapePtr Office::ShapeRange::Group ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(463)
inline HRESULT Office::ShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(464)
inline Office::ShapePtr Office::ShapeRange::Regroup ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(465)
inline HRESULT Office::ShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(466)
inline HRESULT Office::ShapeRange::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(467)
inline HRESULT Office::ShapeRange::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(468)
inline HRESULT Office::ShapeRange::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(469)
inline HRESULT Office::ShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(470)
inline Office::ShapeRangePtr Office::ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(471)
inline HRESULT Office::ShapeRange::ZOrder ( enum MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(472)
inline Office::AdjustmentsPtr Office::ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(473)
inline enum MsoAutoShapeType Office::ShapeRange::GetAutoShapeType ( ) {
    enum MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(474)
inline void Office::ShapeRange::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(475)
inline enum MsoBlackWhiteMode Office::ShapeRange::GetBlackWhiteMode ( ) {
    enum MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(476)
inline void Office::ShapeRange::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline Office::CalloutFormatPtr Office::ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(478)
inline int Office::ShapeRange::GetConnectionSiteCount ( ) {
    int _result;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(479)
inline enum MsoTriState Office::ShapeRange::GetConnector ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(480)
inline Office::ConnectorFormatPtr Office::ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(481)
inline Office::FillFormatPtr Office::ShapeRange::GetFill ( ) {
    struct FillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(482)
inline Office::GroupShapesPtr Office::ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(483)
inline float Office::ShapeRange::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(484)
inline void Office::ShapeRange::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(485)
inline enum MsoTriState Office::ShapeRange::GetHorizontalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(486)
inline float Office::ShapeRange::GetLeft ( ) {
    float _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(487)
inline void Office::ShapeRange::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(488)
inline Office::LineFormatPtr Office::ShapeRange::GetLine ( ) {
    struct LineFormat * _result;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(489)
inline enum MsoTriState Office::ShapeRange::GetLockAspectRatio ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(490)
inline void Office::ShapeRange::PutLockAspectRatio ( enum MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(491)
inline _bstr_t Office::ShapeRange::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(492)
inline void Office::ShapeRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(493)
inline Office::ShapeNodesPtr Office::ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(494)
inline float Office::ShapeRange::GetRotation ( ) {
    float _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(495)
inline void Office::ShapeRange::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(496)
inline Office::PictureFormatPtr Office::ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(497)
inline Office::ShadowFormatPtr Office::ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(498)
inline Office::TextEffectFormatPtr Office::ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(499)
inline Office::TextFramePtr Office::ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(500)
inline Office::ThreeDFormatPtr Office::ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(501)
inline float Office::ShapeRange::GetTop ( ) {
    float _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(502)
inline void Office::ShapeRange::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(503)
inline enum MsoShapeType Office::ShapeRange::GetType ( ) {
    enum MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(504)
inline enum MsoTriState Office::ShapeRange::GetVerticalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(505)
inline _variant_t Office::ShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(506)
inline enum MsoTriState Office::ShapeRange::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(507)
inline void Office::ShapeRange::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(508)
inline float Office::ShapeRange::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(509)
inline void Office::ShapeRange::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(510)
inline int Office::ShapeRange::GetZOrderPosition ( ) {
    int _result;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(511)
inline Office::ScriptPtr Office::ShapeRange::GetScript ( ) {
    struct Script * _result;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(512)
inline _bstr_t Office::ShapeRange::GetAlternativeText ( ) {
    BSTR _result;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(513)
inline void Office::ShapeRange::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(514)
inline enum MsoTriState Office::ShapeRange::GetHasDiagram ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(515)
inline Office::IMsoDiagramPtr Office::ShapeRange::GetDiagram ( ) {
    struct IMsoDiagram * _result;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDiagramPtr(_result, false);
}

#pragma implementation_key(516)
inline enum MsoTriState Office::ShapeRange::GetHasDiagramNode ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(517)
inline Office::DiagramNodePtr Office::ShapeRange::GetDiagramNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(518)
inline enum MsoTriState Office::ShapeRange::GetChild ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(519)
inline Office::ShapePtr Office::ShapeRange::GetParentGroup ( ) {
    struct Shape * _result;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(520)
inline Office::CanvasShapesPtr Office::ShapeRange::GetCanvasItems ( ) {
    struct CanvasShapes * _result;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

#pragma implementation_key(521)
inline int Office::ShapeRange::GetId ( ) {
    int _result;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(522)
inline HRESULT Office::ShapeRange::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(523)
inline HRESULT Office::ShapeRange::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(524)
inline HRESULT Office::ShapeRange::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(525)
inline HRESULT Office::ShapeRange::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(526)
inline void Office::ShapeRange::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Shapes wrapper method implementations
//

#pragma implementation_key(527)
inline IDispatchPtr Office::Shapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(528)
inline int Office::Shapes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(529)
inline Office::ShapePtr Office::Shapes::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(530)
inline IUnknownPtr Office::Shapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(531)
inline Office::ShapePtr Office::Shapes::AddCallout ( enum MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(532)
inline Office::ShapePtr Office::Shapes::AddConnector ( enum MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(533)
inline Office::ShapePtr Office::Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(534)
inline Office::ShapePtr Office::Shapes::AddLabel ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(535)
inline Office::ShapePtr Office::Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(536)
inline Office::ShapePtr Office::Shapes::AddPicture ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(537)
inline Office::ShapePtr Office::Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(538)
inline Office::ShapePtr Office::Shapes::AddShape ( enum MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(539)
inline Office::ShapePtr Office::Shapes::AddTextEffect ( enum MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum MsoTriState FontBold, enum MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(540)
inline Office::ShapePtr Office::Shapes::AddTextbox ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(541)
inline Office::FreeformBuilderPtr Office::Shapes::BuildFreeform ( enum MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(542)
inline Office::ShapeRangePtr Office::Shapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(543)
inline HRESULT Office::Shapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(544)
inline Office::ShapePtr Office::Shapes::GetBackground ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(545)
inline Office::ShapePtr Office::Shapes::GetDefault ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(546)
inline Office::ShapePtr Office::Shapes::AddDiagram ( enum MsoDiagramType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddDiagram(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(547)
inline Office::ShapePtr Office::Shapes::AddCanvas ( float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCanvas(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface TextEffectFormat wrapper method implementations
//

#pragma implementation_key(548)
inline IDispatchPtr Office::TextEffectFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(549)
inline HRESULT Office::TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(550)
inline enum MsoTextEffectAlignment Office::TextEffectFormat::GetAlignment ( ) {
    enum MsoTextEffectAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(551)
inline void Office::TextEffectFormat::PutAlignment ( enum MsoTextEffectAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(552)
inline enum MsoTriState Office::TextEffectFormat::GetFontBold ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline void Office::TextEffectFormat::PutFontBold ( enum MsoTriState FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(554)
inline enum MsoTriState Office::TextEffectFormat::GetFontItalic ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(555)
inline void Office::TextEffectFormat::PutFontItalic ( enum MsoTriState FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(556)
inline _bstr_t Office::TextEffectFormat::GetFontName ( ) {
    BSTR _result;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(557)
inline void Office::TextEffectFormat::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(558)
inline float Office::TextEffectFormat::GetFontSize ( ) {
    float _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(559)
inline void Office::TextEffectFormat::PutFontSize ( float FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(560)
inline enum MsoTriState Office::TextEffectFormat::GetKernedPairs ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(561)
inline void Office::TextEffectFormat::PutKernedPairs ( enum MsoTriState KernedPairs ) {
    HRESULT _hr = put_KernedPairs(KernedPairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(562)
inline enum MsoTriState Office::TextEffectFormat::GetNormalizedHeight ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(563)
inline void Office::TextEffectFormat::PutNormalizedHeight ( enum MsoTriState NormalizedHeight ) {
    HRESULT _hr = put_NormalizedHeight(NormalizedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(564)
inline enum MsoPresetTextEffectShape Office::TextEffectFormat::GetPresetShape ( ) {
    enum MsoPresetTextEffectShape _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(565)
inline void Office::TextEffectFormat::PutPresetShape ( enum MsoPresetTextEffectShape PresetShape ) {
    HRESULT _hr = put_PresetShape(PresetShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(566)
inline enum MsoPresetTextEffect Office::TextEffectFormat::GetPresetTextEffect ( ) {
    enum MsoPresetTextEffect _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(567)
inline void Office::TextEffectFormat::PutPresetTextEffect ( enum MsoPresetTextEffect Preset ) {
    HRESULT _hr = put_PresetTextEffect(Preset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(568)
inline enum MsoTriState Office::TextEffectFormat::GetRotatedChars ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline void Office::TextEffectFormat::PutRotatedChars ( enum MsoTriState RotatedChars ) {
    HRESULT _hr = put_RotatedChars(RotatedChars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(570)
inline _bstr_t Office::TextEffectFormat::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(571)
inline void Office::TextEffectFormat::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline float Office::TextEffectFormat::GetTracking ( ) {
    float _result;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(573)
inline void Office::TextEffectFormat::PutTracking ( float Tracking ) {
    HRESULT _hr = put_Tracking(Tracking);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextFrame wrapper method implementations
//

#pragma implementation_key(574)
inline IDispatchPtr Office::TextFrame::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(575)
inline float Office::TextFrame::GetMarginBottom ( ) {
    float _result;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(576)
inline void Office::TextFrame::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(577)
inline float Office::TextFrame::GetMarginLeft ( ) {
    float _result;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(578)
inline void Office::TextFrame::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(579)
inline float Office::TextFrame::GetMarginRight ( ) {
    float _result;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(580)
inline void Office::TextFrame::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(581)
inline float Office::TextFrame::GetMarginTop ( ) {
    float _result;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(582)
inline void Office::TextFrame::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(583)
inline enum MsoTextOrientation Office::TextFrame::GetOrientation ( ) {
    enum MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(584)
inline void Office::TextFrame::PutOrientation ( enum MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThreeDFormat wrapper method implementations
//

#pragma implementation_key(585)
inline IDispatchPtr Office::ThreeDFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(586)
inline HRESULT Office::ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(587)
inline HRESULT Office::ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(588)
inline HRESULT Office::ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(589)
inline HRESULT Office::ThreeDFormat::SetThreeDFormat ( enum MsoPresetThreeDFormat PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(590)
inline HRESULT Office::ThreeDFormat::SetExtrusionDirection ( enum MsoPresetExtrusionDirection PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(591)
inline float Office::ThreeDFormat::GetDepth ( ) {
    float _result;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(592)
inline void Office::ThreeDFormat::PutDepth ( float Depth ) {
    HRESULT _hr = put_Depth(Depth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(593)
inline Office::ColorFormatPtr Office::ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(594)
inline enum MsoExtrusionColorType Office::ThreeDFormat::GetExtrusionColorType ( ) {
    enum MsoExtrusionColorType _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(595)
inline void Office::ThreeDFormat::PutExtrusionColorType ( enum MsoExtrusionColorType ExtrusionColorType ) {
    HRESULT _hr = put_ExtrusionColorType(ExtrusionColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(596)
inline enum MsoTriState Office::ThreeDFormat::GetPerspective ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(597)
inline void Office::ThreeDFormat::PutPerspective ( enum MsoTriState Perspective ) {
    HRESULT _hr = put_Perspective(Perspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(598)
inline enum MsoPresetExtrusionDirection Office::ThreeDFormat::GetPresetExtrusionDirection ( ) {
    enum MsoPresetExtrusionDirection _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(599)
inline enum MsoPresetLightingDirection Office::ThreeDFormat::GetPresetLightingDirection ( ) {
    enum MsoPresetLightingDirection _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(600)
inline void Office::ThreeDFormat::PutPresetLightingDirection ( enum MsoPresetLightingDirection PresetLightingDirection ) {
    HRESULT _hr = put_PresetLightingDirection(PresetLightingDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(601)
inline enum MsoPresetLightingSoftness Office::ThreeDFormat::GetPresetLightingSoftness ( ) {
    enum MsoPresetLightingSoftness _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(602)
inline void Office::ThreeDFormat::PutPresetLightingSoftness ( enum MsoPresetLightingSoftness PresetLightingSoftness ) {
    HRESULT _hr = put_PresetLightingSoftness(PresetLightingSoftness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(603)
inline enum MsoPresetMaterial Office::ThreeDFormat::GetPresetMaterial ( ) {
    enum MsoPresetMaterial _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(604)
inline void Office::ThreeDFormat::PutPresetMaterial ( enum MsoPresetMaterial PresetMaterial ) {
    HRESULT _hr = put_PresetMaterial(PresetMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(605)
inline enum MsoPresetThreeDFormat Office::ThreeDFormat::GetPresetThreeDFormat ( ) {
    enum MsoPresetThreeDFormat _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(606)
inline float Office::ThreeDFormat::GetRotationX ( ) {
    float _result;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline void Office::ThreeDFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(608)
inline float Office::ThreeDFormat::GetRotationY ( ) {
    float _result;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(609)
inline void Office::ThreeDFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(610)
inline enum MsoTriState Office::ThreeDFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(611)
inline void Office::ThreeDFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMsoDispCagNotifySink wrapper method implementations
//

#pragma implementation_key(612)
inline HRESULT Office::IMsoDispCagNotifySink::InsertClip ( IUnknown * pClipMoniker, IUnknown * pItemMoniker ) {
    HRESULT _hr = raw_InsertClip(pClipMoniker, pItemMoniker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(613)
inline HRESULT Office::IMsoDispCagNotifySink::WindowIsClosing ( ) {
    HRESULT _hr = raw_WindowIsClosing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Balloon wrapper method implementations
//

#pragma implementation_key(614)
inline IDispatchPtr Office::Balloon::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(615)
inline IDispatchPtr Office::Balloon::GetCheckboxes ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Checkboxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(616)
inline IDispatchPtr Office::Balloon::GetLabels ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Labels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(617)
inline void Office::Balloon::PutBalloonType ( enum MsoBalloonType pbty ) {
    HRESULT _hr = put_BalloonType(pbty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(618)
inline enum MsoBalloonType Office::Balloon::GetBalloonType ( ) {
    enum MsoBalloonType _result;
    HRESULT _hr = get_BalloonType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(619)
inline void Office::Balloon::PutIcon ( enum MsoIconType picn ) {
    HRESULT _hr = put_Icon(picn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(620)
inline enum MsoIconType Office::Balloon::GetIcon ( ) {
    enum MsoIconType _result;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(621)
inline void Office::Balloon::PutHeading ( _bstr_t pbstr ) {
    HRESULT _hr = put_Heading(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(622)
inline _bstr_t Office::Balloon::GetHeading ( ) {
    BSTR _result;
    HRESULT _hr = get_Heading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(623)
inline void Office::Balloon::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(624)
inline _bstr_t Office::Balloon::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(625)
inline void Office::Balloon::PutMode ( enum MsoModeType pmd ) {
    HRESULT _hr = put_Mode(pmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(626)
inline enum MsoModeType Office::Balloon::GetMode ( ) {
    enum MsoModeType _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(627)
inline void Office::Balloon::PutAnimation ( enum MsoAnimationType pfca ) {
    HRESULT _hr = put_Animation(pfca);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(628)
inline enum MsoAnimationType Office::Balloon::GetAnimation ( ) {
    enum MsoAnimationType _result;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(629)
inline void Office::Balloon::PutButton ( enum MsoButtonSetType psbs ) {
    HRESULT _hr = put_Button(psbs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(630)
inline enum MsoButtonSetType Office::Balloon::GetButton ( ) {
    enum MsoButtonSetType _result;
    HRESULT _hr = get_Button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline void Office::Balloon::PutCallback ( _bstr_t pbstr ) {
    HRESULT _hr = put_Callback(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(632)
inline _bstr_t Office::Balloon::GetCallback ( ) {
    BSTR _result;
    HRESULT _hr = get_Callback(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(633)
inline void Office::Balloon::PutPrivate ( long plPrivate ) {
    HRESULT _hr = put_Private(plPrivate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(634)
inline long Office::Balloon::GetPrivate ( ) {
    long _result;
    HRESULT _hr = get_Private(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(635)
inline HRESULT Office::Balloon::SetAvoidRectangle ( int Left, int Top, int Right, int Bottom ) {
    HRESULT _hr = raw_SetAvoidRectangle(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(636)
inline _bstr_t Office::Balloon::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(637)
inline enum MsoBalloonButtonType Office::Balloon::Show ( ) {
    enum MsoBalloonButtonType _result;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(638)
inline HRESULT Office::Balloon::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface BalloonCheckboxes wrapper method implementations
//

#pragma implementation_key(639)
inline _bstr_t Office::BalloonCheckboxes::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(640)
inline IDispatchPtr Office::BalloonCheckboxes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(641)
inline IDispatchPtr Office::BalloonCheckboxes::GetItem ( int Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(642)
inline int Office::BalloonCheckboxes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(643)
inline void Office::BalloonCheckboxes::PutCount ( int pccbx ) {
    HRESULT _hr = put_Count(pccbx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(644)
inline IUnknownPtr Office::BalloonCheckboxes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface BalloonCheckbox wrapper method implementations
//

#pragma implementation_key(645)
inline _bstr_t Office::BalloonCheckbox::GetItem ( ) {
    BSTR _result;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(646)
inline _bstr_t Office::BalloonCheckbox::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(647)
inline IDispatchPtr Office::BalloonCheckbox::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(648)
inline void Office::BalloonCheckbox::PutChecked ( VARIANT_BOOL pvarfChecked ) {
    HRESULT _hr = put_Checked(pvarfChecked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(649)
inline VARIANT_BOOL Office::BalloonCheckbox::GetChecked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Checked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(650)
inline void Office::BalloonCheckbox::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(651)
inline _bstr_t Office::BalloonCheckbox::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface BalloonLabels wrapper method implementations
//

#pragma implementation_key(652)
inline _bstr_t Office::BalloonLabels::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(653)
inline IDispatchPtr Office::BalloonLabels::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(654)
inline IDispatchPtr Office::BalloonLabels::GetItem ( int Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(655)
inline int Office::BalloonLabels::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(656)
inline void Office::BalloonLabels::PutCount ( int pcwz ) {
    HRESULT _hr = put_Count(pcwz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(657)
inline IUnknownPtr Office::BalloonLabels::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface BalloonLabel wrapper method implementations
//

#pragma implementation_key(658)
inline _bstr_t Office::BalloonLabel::GetItem ( ) {
    BSTR _result;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(659)
inline _bstr_t Office::BalloonLabel::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(660)
inline IDispatchPtr Office::BalloonLabel::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(661)
inline void Office::BalloonLabel::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(662)
inline _bstr_t Office::BalloonLabel::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface AnswerWizardFiles wrapper method implementations
//

#pragma implementation_key(663)
inline IDispatchPtr Office::AnswerWizardFiles::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(664)
inline _bstr_t Office::AnswerWizardFiles::GetItem ( int Index ) {
    BSTR _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(665)
inline int Office::AnswerWizardFiles::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline HRESULT Office::AnswerWizardFiles::Add ( _bstr_t FileName ) {
    HRESULT _hr = raw_Add(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(667)
inline HRESULT Office::AnswerWizardFiles::Delete ( _bstr_t FileName ) {
    HRESULT _hr = raw_Delete(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface AnswerWizard wrapper method implementations
//

#pragma implementation_key(668)
inline IDispatchPtr Office::AnswerWizard::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(669)
inline Office::AnswerWizardFilesPtr Office::AnswerWizard::GetFiles ( ) {
    struct AnswerWizardFiles * _result;
    HRESULT _hr = get_Files(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnswerWizardFilesPtr(_result, false);
}

#pragma implementation_key(670)
inline HRESULT Office::AnswerWizard::ClearFileList ( ) {
    HRESULT _hr = raw_ClearFileList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(671)
inline HRESULT Office::AnswerWizard::ResetFileList ( ) {
    HRESULT _hr = raw_ResetFileList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Assistant wrapper method implementations
//

#pragma implementation_key(672)
inline IDispatchPtr Office::Assistant::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(673)
inline HRESULT Office::Assistant::Move ( int xLeft, int yTop ) {
    HRESULT _hr = raw_Move(xLeft, yTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(674)
inline void Office::Assistant::PutTop ( int pyTop ) {
    HRESULT _hr = put_Top(pyTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(675)
inline int Office::Assistant::GetTop ( ) {
    int _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(676)
inline void Office::Assistant::PutLeft ( int pxLeft ) {
    HRESULT _hr = put_Left(pxLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(677)
inline int Office::Assistant::GetLeft ( ) {
    int _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(678)
inline HRESULT Office::Assistant::Help ( ) {
    HRESULT _hr = raw_Help();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(679)
inline long Office::Assistant::StartWizard ( VARIANT_BOOL On, _bstr_t Callback, long PrivateX, const _variant_t & Animation, const _variant_t & CustomTeaser, const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right ) {
    long _result;
    HRESULT _hr = raw_StartWizard(On, Callback, PrivateX, Animation, CustomTeaser, Top, Left, Bottom, Right, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(680)
inline HRESULT Office::Assistant::EndWizard ( long WizardID, VARIANT_BOOL varfSuccess, const _variant_t & Animation ) {
    HRESULT _hr = raw_EndWizard(WizardID, varfSuccess, Animation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(681)
inline HRESULT Office::Assistant::ActivateWizard ( long WizardID, enum MsoWizardActType act, const _variant_t & Animation ) {
    HRESULT _hr = raw_ActivateWizard(WizardID, act, Animation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(682)
inline HRESULT Office::Assistant::ResetTips ( ) {
    HRESULT _hr = raw_ResetTips();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(683)
inline Office::BalloonPtr Office::Assistant::GetNewBalloon ( ) {
    struct Balloon * _result;
    HRESULT _hr = get_NewBalloon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BalloonPtr(_result, false);
}

#pragma implementation_key(684)
inline enum MsoBalloonErrorType Office::Assistant::GetBalloonError ( ) {
    enum MsoBalloonErrorType _result;
    HRESULT _hr = get_BalloonError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(685)
inline VARIANT_BOOL Office::Assistant::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(686)
inline void Office::Assistant::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(687)
inline enum MsoAnimationType Office::Assistant::GetAnimation ( ) {
    enum MsoAnimationType _result;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(688)
inline void Office::Assistant::PutAnimation ( enum MsoAnimationType pfca ) {
    HRESULT _hr = put_Animation(pfca);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(689)
inline VARIANT_BOOL Office::Assistant::GetReduced ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Reduced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(690)
inline void Office::Assistant::PutReduced ( VARIANT_BOOL pvarfReduced ) {
    HRESULT _hr = put_Reduced(pvarfReduced);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(691)
inline void Office::Assistant::PutAssistWithHelp ( VARIANT_BOOL pvarfAssistWithHelp ) {
    HRESULT _hr = put_AssistWithHelp(pvarfAssistWithHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(692)
inline VARIANT_BOOL Office::Assistant::GetAssistWithHelp ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AssistWithHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline void Office::Assistant::PutAssistWithWizards ( VARIANT_BOOL pvarfAssistWithWizards ) {
    HRESULT _hr = put_AssistWithWizards(pvarfAssistWithWizards);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(694)
inline VARIANT_BOOL Office::Assistant::GetAssistWithWizards ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AssistWithWizards(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline void Office::Assistant::PutAssistWithAlerts ( VARIANT_BOOL pvarfAssistWithAlerts ) {
    HRESULT _hr = put_AssistWithAlerts(pvarfAssistWithAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(696)
inline VARIANT_BOOL Office::Assistant::GetAssistWithAlerts ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AssistWithAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(697)
inline void Office::Assistant::PutMoveWhenInTheWay ( VARIANT_BOOL pvarfMove ) {
    HRESULT _hr = put_MoveWhenInTheWay(pvarfMove);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(698)
inline VARIANT_BOOL Office::Assistant::GetMoveWhenInTheWay ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MoveWhenInTheWay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(699)
inline void Office::Assistant::PutSounds ( VARIANT_BOOL pvarfSounds ) {
    HRESULT _hr = put_Sounds(pvarfSounds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(700)
inline VARIANT_BOOL Office::Assistant::GetSounds ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Sounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(701)
inline void Office::Assistant::PutFeatureTips ( VARIANT_BOOL pvarfFeatures ) {
    HRESULT _hr = put_FeatureTips(pvarfFeatures);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(702)
inline VARIANT_BOOL Office::Assistant::GetFeatureTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FeatureTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(703)
inline void Office::Assistant::PutMouseTips ( VARIANT_BOOL pvarfMouse ) {
    HRESULT _hr = put_MouseTips(pvarfMouse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(704)
inline VARIANT_BOOL Office::Assistant::GetMouseTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MouseTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(705)
inline void Office::Assistant::PutKeyboardShortcutTips ( VARIANT_BOOL pvarfKeyboardShortcuts ) {
    HRESULT _hr = put_KeyboardShortcutTips(pvarfKeyboardShortcuts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(706)
inline VARIANT_BOOL Office::Assistant::GetKeyboardShortcutTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeyboardShortcutTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(707)
inline void Office::Assistant::PutHighPriorityTips ( VARIANT_BOOL pvarfHighPriorityTips ) {
    HRESULT _hr = put_HighPriorityTips(pvarfHighPriorityTips);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(708)
inline VARIANT_BOOL Office::Assistant::GetHighPriorityTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HighPriorityTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(709)
inline void Office::Assistant::PutTipOfDay ( VARIANT_BOOL pvarfTipOfDay ) {
    HRESULT _hr = put_TipOfDay(pvarfTipOfDay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(710)
inline VARIANT_BOOL Office::Assistant::GetTipOfDay ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TipOfDay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(711)
inline void Office::Assistant::PutGuessHelp ( VARIANT_BOOL pvarfGuessHelp ) {
    HRESULT _hr = put_GuessHelp(pvarfGuessHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(712)
inline VARIANT_BOOL Office::Assistant::GetGuessHelp ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_GuessHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(713)
inline void Office::Assistant::PutSearchWhenProgramming ( VARIANT_BOOL pvarfSearchInProgram ) {
    HRESULT _hr = put_SearchWhenProgramming(pvarfSearchInProgram);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(714)
inline VARIANT_BOOL Office::Assistant::GetSearchWhenProgramming ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SearchWhenProgramming(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline _bstr_t Office::Assistant::GetItem ( ) {
    BSTR _result;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(716)
inline _bstr_t Office::Assistant::GetFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(717)
inline void Office::Assistant::PutFileName ( _bstr_t pbstr ) {
    HRESULT _hr = put_FileName(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(718)
inline _bstr_t Office::Assistant::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(719)
inline VARIANT_BOOL Office::Assistant::GetOn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_On(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(720)
inline void Office::Assistant::PutOn ( VARIANT_BOOL pvarfOn ) {
    HRESULT _hr = put_On(pvarfOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(721)
inline int Office::Assistant::DoAlert ( _bstr_t bstrAlertTitle, _bstr_t bstrAlertText, enum MsoAlertButtonType alb, enum MsoAlertIconType alc, enum MsoAlertDefaultType ald, enum MsoAlertCancelType alq, VARIANT_BOOL varfSysAlert ) {
    int _result;
    HRESULT _hr = raw_DoAlert(bstrAlertTitle, bstrAlertText, alb, alc, ald, alq, varfSysAlert, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DocumentProperty wrapper method implementations
//

#pragma implementation_key(722)
inline HRESULT Office::DocumentProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(723)
inline _bstr_t Office::DocumentProperty::GetName ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Name(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(724)
inline void Office::DocumentProperty::PutName ( long lcid, _bstr_t pbstrRetVal ) {
    HRESULT _hr = put_Name(lcid, pbstrRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline _variant_t Office::DocumentProperty::GetValue ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(726)
inline void Office::DocumentProperty::PutValue ( long lcid, const _variant_t & pvargRetVal ) {
    HRESULT _hr = put_Value(lcid, pvargRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(727)
inline enum MsoDocProperties Office::DocumentProperty::GetType ( long lcid ) {
    enum MsoDocProperties _result;
    HRESULT _hr = get_Type(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(728)
inline void Office::DocumentProperty::PutType ( long lcid, enum MsoDocProperties ptypeRetVal ) {
    HRESULT _hr = put_Type(lcid, ptypeRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline VARIANT_BOOL Office::DocumentProperty::GetLinkToContent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LinkToContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline void Office::DocumentProperty::PutLinkToContent ( VARIANT_BOOL pfLinkRetVal ) {
    HRESULT _hr = put_LinkToContent(pfLinkRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(731)
inline _bstr_t Office::DocumentProperty::GetLinkSource ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(732)
inline void Office::DocumentProperty::PutLinkSource ( _bstr_t pbstrSourceRetVal ) {
    HRESULT _hr = put_LinkSource(pbstrSourceRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(733)
inline IDispatchPtr Office::DocumentProperty::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(734)
inline long Office::DocumentProperty::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DocumentProperties wrapper method implementations
//

#pragma implementation_key(735)
inline Office::DocumentPropertyPtr Office::DocumentProperties::GetItem ( const _variant_t & Index, long lcid ) {
    struct DocumentProperty * _result;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentPropertyPtr(_result, false);
}

#pragma implementation_key(736)
inline long Office::DocumentProperties::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(737)
inline Office::DocumentPropertyPtr Office::DocumentProperties::Add ( _bstr_t Name, VARIANT_BOOL LinkToContent, const _variant_t & Type, const _variant_t & Value, const _variant_t & LinkSource, long lcid ) {
    struct DocumentProperty * _result;
    HRESULT _hr = raw_Add(Name, LinkToContent, Type, Value, LinkSource, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentPropertyPtr(_result, false);
}

#pragma implementation_key(738)
inline IUnknownPtr Office::DocumentProperties::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(739)
inline IDispatchPtr Office::DocumentProperties::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(740)
inline long Office::DocumentProperties::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFoundFiles wrapper method implementations
//

#pragma implementation_key(741)
inline _bstr_t Office::IFoundFiles::GetItem ( int Index ) {
    BSTR _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(742)
inline int Office::IFoundFiles::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(743)
inline IUnknownPtr Office::IFoundFiles::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IFind wrapper method implementations
//

#pragma implementation_key(744)
inline _bstr_t Office::IFind::GetSearchPath ( ) {
    BSTR _result;
    HRESULT _hr = get_SearchPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(745)
inline _bstr_t Office::IFind::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(746)
inline VARIANT_BOOL Office::IFind::GetSubDir ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SubDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(747)
inline _bstr_t Office::IFind::GetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(748)
inline _bstr_t Office::IFind::GetAuthor ( ) {
    BSTR _result;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(749)
inline _bstr_t Office::IFind::GetKeywords ( ) {
    BSTR _result;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(750)
inline _bstr_t Office::IFind::GetSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(751)
inline enum MsoFileFindOptions Office::IFind::GetOptions ( ) {
    enum MsoFileFindOptions _result;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(752)
inline VARIANT_BOOL Office::IFind::GetMatchCase ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchCase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(753)
inline _bstr_t Office::IFind::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(754)
inline VARIANT_BOOL Office::IFind::GetPatternMatch ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PatternMatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(755)
inline _variant_t Office::IFind::GetDateSavedFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateSavedFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(756)
inline _variant_t Office::IFind::GetDateSavedTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateSavedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(757)
inline _bstr_t Office::IFind::GetSavedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_SavedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(758)
inline _variant_t Office::IFind::GetDateCreatedFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateCreatedFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(759)
inline _variant_t Office::IFind::GetDateCreatedTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateCreatedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(760)
inline enum MsoFileFindView Office::IFind::GetView ( ) {
    enum MsoFileFindView _result;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(761)
inline enum MsoFileFindSortBy Office::IFind::GetSortBy ( ) {
    enum MsoFileFindSortBy _result;
    HRESULT _hr = get_SortBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(762)
inline enum MsoFileFindListBy Office::IFind::GetListBy ( ) {
    enum MsoFileFindListBy _result;
    HRESULT _hr = get_ListBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(763)
inline int Office::IFind::GetSelectedFile ( ) {
    int _result;
    HRESULT _hr = get_SelectedFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(764)
inline Office::IFoundFilesPtr Office::IFind::GetResults ( ) {
    struct IFoundFiles * _result;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFoundFilesPtr(_result, false);
}

#pragma implementation_key(765)
inline int Office::IFind::Show ( ) {
    int _result;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(766)
inline void Office::IFind::PutSearchPath ( _bstr_t pbstr ) {
    HRESULT _hr = put_SearchPath(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(767)
inline void Office::IFind::PutName ( _bstr_t pbstr ) {
    HRESULT _hr = put_Name(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline void Office::IFind::PutSubDir ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_SubDir(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(769)
inline void Office::IFind::PutTitle ( _bstr_t pbstr ) {
    HRESULT _hr = put_Title(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline void Office::IFind::PutAuthor ( _bstr_t pbstr ) {
    HRESULT _hr = put_Author(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(771)
inline void Office::IFind::PutKeywords ( _bstr_t pbstr ) {
    HRESULT _hr = put_Keywords(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline void Office::IFind::PutSubject ( _bstr_t pbstr ) {
    HRESULT _hr = put_Subject(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(773)
inline void Office::IFind::PutOptions ( enum MsoFileFindOptions penmOptions ) {
    HRESULT _hr = put_Options(penmOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline void Office::IFind::PutMatchCase ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_MatchCase(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(775)
inline void Office::IFind::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(776)
inline void Office::IFind::PutPatternMatch ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_PatternMatch(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(777)
inline void Office::IFind::PutDateSavedFrom ( const _variant_t & pdatSavedFrom ) {
    HRESULT _hr = put_DateSavedFrom(pdatSavedFrom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(778)
inline void Office::IFind::PutDateSavedTo ( const _variant_t & pdatSavedTo ) {
    HRESULT _hr = put_DateSavedTo(pdatSavedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(779)
inline void Office::IFind::PutSavedBy ( _bstr_t pbstr ) {
    HRESULT _hr = put_SavedBy(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(780)
inline void Office::IFind::PutDateCreatedFrom ( const _variant_t & pdatCreatedFrom ) {
    HRESULT _hr = put_DateCreatedFrom(pdatCreatedFrom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(781)
inline void Office::IFind::PutDateCreatedTo ( const _variant_t & pdatCreatedTo ) {
    HRESULT _hr = put_DateCreatedTo(pdatCreatedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(782)
inline void Office::IFind::PutView ( enum MsoFileFindView penmView ) {
    HRESULT _hr = put_View(penmView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(783)
inline void Office::IFind::PutSortBy ( enum MsoFileFindSortBy penmSortBy ) {
    HRESULT _hr = put_SortBy(penmSortBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline void Office::IFind::PutListBy ( enum MsoFileFindListBy penmListBy ) {
    HRESULT _hr = put_ListBy(penmListBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(785)
inline void Office::IFind::PutSelectedFile ( int pintSelectedFile ) {
    HRESULT _hr = put_SelectedFile(pintSelectedFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(786)
inline HRESULT Office::IFind::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(787)
inline HRESULT Office::IFind::Load ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Load(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(788)
inline HRESULT Office::IFind::Save ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Save(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(789)
inline HRESULT Office::IFind::Delete ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Delete(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(790)
inline long Office::IFind::GetFileType ( ) {
    long _result;
    HRESULT _hr = get_FileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(791)
inline void Office::IFind::PutFileType ( long plFileType ) {
    HRESULT _hr = put_FileType(plFileType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FoundFiles wrapper method implementations
//

#pragma implementation_key(792)
inline _bstr_t Office::FoundFiles::GetItem ( int Index, long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(793)
inline long Office::FoundFiles::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline IUnknownPtr Office::FoundFiles::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PropertyTest wrapper method implementations
//

#pragma implementation_key(795)
inline _bstr_t Office::PropertyTest::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(796)
inline enum MsoCondition Office::PropertyTest::GetCondition ( ) {
    enum MsoCondition _result;
    HRESULT _hr = get_Condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(797)
inline _variant_t Office::PropertyTest::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(798)
inline _variant_t Office::PropertyTest::GetSecondValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SecondValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(799)
inline enum MsoConnector Office::PropertyTest::GetConnector ( ) {
    enum MsoConnector _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PropertyTests wrapper method implementations
//

#pragma implementation_key(800)
inline Office::PropertyTestPtr Office::PropertyTests::GetItem ( int Index, long lcid ) {
    struct PropertyTest * _result;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyTestPtr(_result, false);
}

#pragma implementation_key(801)
inline long Office::PropertyTests::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(802)
inline HRESULT Office::PropertyTests::Add ( _bstr_t Name, enum MsoCondition Condition, const _variant_t & Value, const _variant_t & SecondValue, enum MsoConnector Connector ) {
    HRESULT _hr = raw_Add(Name, Condition, Value, SecondValue, Connector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(803)
inline HRESULT Office::PropertyTests::Remove ( int Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(804)
inline IUnknownPtr Office::PropertyTests::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface FileSearch wrapper method implementations
//

#pragma implementation_key(805)
inline VARIANT_BOOL Office::FileSearch::GetSearchSubFolders ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SearchSubFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline void Office::FileSearch::PutSearchSubFolders ( VARIANT_BOOL SearchSubFoldersRetVal ) {
    HRESULT _hr = put_SearchSubFolders(SearchSubFoldersRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(807)
inline VARIANT_BOOL Office::FileSearch::GetMatchTextExactly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchTextExactly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline void Office::FileSearch::PutMatchTextExactly ( VARIANT_BOOL MatchTextRetVal ) {
    HRESULT _hr = put_MatchTextExactly(MatchTextRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(809)
inline VARIANT_BOOL Office::FileSearch::GetMatchAllWordForms ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchAllWordForms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(810)
inline void Office::FileSearch::PutMatchAllWordForms ( VARIANT_BOOL MatchAllWordFormsRetVal ) {
    HRESULT _hr = put_MatchAllWordForms(MatchAllWordFormsRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(811)
inline _bstr_t Office::FileSearch::GetFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(812)
inline void Office::FileSearch::PutFileName ( _bstr_t FileNameRetVal ) {
    HRESULT _hr = put_FileName(FileNameRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(813)
inline enum MsoFileType Office::FileSearch::GetFileType ( ) {
    enum MsoFileType _result;
    HRESULT _hr = get_FileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(814)
inline void Office::FileSearch::PutFileType ( enum MsoFileType FileTypeRetVal ) {
    HRESULT _hr = put_FileType(FileTypeRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(815)
inline enum MsoLastModified Office::FileSearch::GetLastModified ( ) {
    enum MsoLastModified _result;
    HRESULT _hr = get_LastModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(816)
inline void Office::FileSearch::PutLastModified ( enum MsoLastModified LastModifiedRetVal ) {
    HRESULT _hr = put_LastModified(LastModifiedRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(817)
inline _bstr_t Office::FileSearch::GetTextOrProperty ( ) {
    BSTR _result;
    HRESULT _hr = get_TextOrProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(818)
inline void Office::FileSearch::PutTextOrProperty ( _bstr_t TextOrProperty ) {
    HRESULT _hr = put_TextOrProperty(TextOrProperty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(819)
inline _bstr_t Office::FileSearch::GetLookIn ( ) {
    BSTR _result;
    HRESULT _hr = get_LookIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(820)
inline void Office::FileSearch::PutLookIn ( _bstr_t LookInRetVal ) {
    HRESULT _hr = put_LookIn(LookInRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(821)
inline int Office::FileSearch::Execute ( enum MsoSortBy SortBy, enum MsoSortOrder SortOrder, VARIANT_BOOL AlwaysAccurate ) {
    int _result;
    HRESULT _hr = raw_Execute(SortBy, SortOrder, AlwaysAccurate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(822)
inline HRESULT Office::FileSearch::NewSearch ( ) {
    HRESULT _hr = raw_NewSearch();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(823)
inline Office::FoundFilesPtr Office::FileSearch::GetFoundFiles ( ) {
    struct FoundFiles * _result;
    HRESULT _hr = get_FoundFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FoundFilesPtr(_result, false);
}

#pragma implementation_key(824)
inline Office::PropertyTestsPtr Office::FileSearch::GetPropertyTests ( ) {
    struct PropertyTests * _result;
    HRESULT _hr = get_PropertyTests(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyTestsPtr(_result, false);
}

#pragma implementation_key(825)
inline Office::SearchScopesPtr Office::FileSearch::GetSearchScopes ( ) {
    struct SearchScopes * _result;
    HRESULT _hr = get_SearchScopes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchScopesPtr(_result, false);
}

#pragma implementation_key(826)
inline Office::SearchFoldersPtr Office::FileSearch::GetSearchFolders ( ) {
    struct SearchFolders * _result;
    HRESULT _hr = get_SearchFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchFoldersPtr(_result, false);
}

#pragma implementation_key(827)
inline Office::FileTypesPtr Office::FileSearch::GetFileTypes ( ) {
    struct FileTypes * _result;
    HRESULT _hr = get_FileTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileTypesPtr(_result, false);
}

#pragma implementation_key(828)
inline HRESULT Office::FileSearch::RefreshScopes ( ) {
    HRESULT _hr = raw_RefreshScopes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface COMAddIn wrapper method implementations
//

#pragma implementation_key(829)
inline _bstr_t Office::COMAddIn::GetDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(830)
inline void Office::COMAddIn::PutDescription ( _bstr_t RetValue ) {
    HRESULT _hr = put_Description(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(831)
inline _bstr_t Office::COMAddIn::GetProgId ( ) {
    BSTR _result;
    HRESULT _hr = get_ProgId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(832)
inline _bstr_t Office::COMAddIn::GetGuid ( ) {
    BSTR _result;
    HRESULT _hr = get_Guid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(833)
inline VARIANT_BOOL Office::COMAddIn::GetConnect ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Connect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(834)
inline void Office::COMAddIn::PutConnect ( VARIANT_BOOL RetValue ) {
    HRESULT _hr = put_Connect(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(835)
inline IDispatchPtr Office::COMAddIn::GetObject ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(836)
inline void Office::COMAddIn::PutObject ( IDispatch * RetValue ) {
    HRESULT _hr = put_Object(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(837)
inline IDispatchPtr Office::COMAddIn::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface COMAddIns wrapper method implementations
//

#pragma implementation_key(838)
inline Office::COMAddInPtr Office::COMAddIns::Item ( VARIANT * Index ) {
    struct COMAddIn * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return COMAddInPtr(_result, false);
}

#pragma implementation_key(839)
inline long Office::COMAddIns::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(840)
inline IUnknownPtr Office::COMAddIns::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(841)
inline HRESULT Office::COMAddIns::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(842)
inline IDispatchPtr Office::COMAddIns::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(843)
inline HRESULT Office::COMAddIns::SetAppModal ( VARIANT_BOOL varfModal ) {
    HRESULT _hr = raw_SetAppModal(varfModal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface LanguageSettings wrapper method implementations
//

#pragma implementation_key(844)
inline int Office::LanguageSettings::GetLanguageID ( enum MsoAppLanguageID Id ) {
    int _result;
    HRESULT _hr = get_LanguageID(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(845)
inline VARIANT_BOOL Office::LanguageSettings::GetLanguagePreferredForEditing ( enum MsoLanguageID lid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LanguagePreferredForEditing(lid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(846)
inline IDispatchPtr Office::LanguageSettings::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// dispinterface _CommandBarsEvents wrapper method implementations
//

#pragma implementation_key(847)
inline HRESULT Office::_CommandBarsEvents::OnUpdate ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _CommandBarComboBoxEvents wrapper method implementations
//

#pragma implementation_key(848)
inline HRESULT Office::_CommandBarComboBoxEvents::Change ( struct _CommandBarComboBox * Ctrl ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Ctrl);
}

//
// dispinterface _CommandBarButtonEvents wrapper method implementations
//

#pragma implementation_key(849)
inline HRESULT Office::_CommandBarButtonEvents::Click ( struct _CommandBarButton * Ctrl, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Ctrl, CancelDefault);
}

//
// interface WebPageFont wrapper method implementations
//

#pragma implementation_key(850)
inline _bstr_t Office::WebPageFont::GetProportionalFont ( ) {
    BSTR _result;
    HRESULT _hr = get_ProportionalFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(851)
inline void Office::WebPageFont::PutProportionalFont ( _bstr_t pstr ) {
    HRESULT _hr = put_ProportionalFont(pstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(852)
inline float Office::WebPageFont::GetProportionalFontSize ( ) {
    float _result;
    HRESULT _hr = get_ProportionalFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(853)
inline void Office::WebPageFont::PutProportionalFontSize ( float pf ) {
    HRESULT _hr = put_ProportionalFontSize(pf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(854)
inline _bstr_t Office::WebPageFont::GetFixedWidthFont ( ) {
    BSTR _result;
    HRESULT _hr = get_FixedWidthFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(855)
inline void Office::WebPageFont::PutFixedWidthFont ( _bstr_t pstr ) {
    HRESULT _hr = put_FixedWidthFont(pstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(856)
inline float Office::WebPageFont::GetFixedWidthFontSize ( ) {
    float _result;
    HRESULT _hr = get_FixedWidthFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(857)
inline void Office::WebPageFont::PutFixedWidthFontSize ( float pf ) {
    HRESULT _hr = put_FixedWidthFontSize(pf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface WebPageFonts wrapper method implementations
//

#pragma implementation_key(858)
inline int Office::WebPageFonts::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(859)
inline Office::WebPageFontPtr Office::WebPageFonts::GetItem ( enum MsoCharacterSet Index ) {
    struct WebPageFont * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebPageFontPtr(_result, false);
}

#pragma implementation_key(860)
inline IUnknownPtr Office::WebPageFonts::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface HTMLProjectItem wrapper method implementations
//

#pragma implementation_key(861)
inline _bstr_t Office::HTMLProjectItem::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(862)
inline VARIANT_BOOL Office::HTMLProjectItem::GetIsOpen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(863)
inline HRESULT Office::HTMLProjectItem::LoadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(864)
inline HRESULT Office::HTMLProjectItem::Open ( enum MsoHTMLProjectOpen OpenKind ) {
    HRESULT _hr = raw_Open(OpenKind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(865)
inline HRESULT Office::HTMLProjectItem::SaveCopyAs ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveCopyAs(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(866)
inline _bstr_t Office::HTMLProjectItem::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(867)
inline void Office::HTMLProjectItem::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(868)
inline IDispatchPtr Office::HTMLProjectItem::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface HTMLProjectItems wrapper method implementations
//

#pragma implementation_key(869)
inline Office::HTMLProjectItemPtr Office::HTMLProjectItems::Item ( VARIANT * Index ) {
    struct HTMLProjectItem * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLProjectItemPtr(_result, false);
}

#pragma implementation_key(870)
inline long Office::HTMLProjectItems::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(871)
inline IUnknownPtr Office::HTMLProjectItems::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(872)
inline IDispatchPtr Office::HTMLProjectItems::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface HTMLProject wrapper method implementations
//

#pragma implementation_key(873)
inline enum MsoHTMLProjectState Office::HTMLProject::GetState ( ) {
    enum MsoHTMLProjectState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(874)
inline HRESULT Office::HTMLProject::RefreshProject ( VARIANT_BOOL Refresh ) {
    HRESULT _hr = raw_RefreshProject(Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(875)
inline HRESULT Office::HTMLProject::RefreshDocument ( VARIANT_BOOL Refresh ) {
    HRESULT _hr = raw_RefreshDocument(Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(876)
inline Office::HTMLProjectItemsPtr Office::HTMLProject::GetHTMLProjectItems ( ) {
    struct HTMLProjectItems * _result;
    HRESULT _hr = get_HTMLProjectItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLProjectItemsPtr(_result, false);
}

#pragma implementation_key(877)
inline IDispatchPtr Office::HTMLProject::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(878)
inline HRESULT Office::HTMLProject::Open ( enum MsoHTMLProjectOpen OpenKind ) {
    HRESULT _hr = raw_Open(OpenKind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MsoDebugOptions wrapper method implementations
//

#pragma implementation_key(879)
inline int Office::MsoDebugOptions::GetFeatureReports ( ) {
    int _result;
    HRESULT _hr = get_FeatureReports(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline void Office::MsoDebugOptions::PutFeatureReports ( int puintFeatureReports ) {
    HRESULT _hr = put_FeatureReports(puintFeatureReports);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline VARIANT_BOOL Office::MsoDebugOptions::GetOutputToDebugger ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OutputToDebugger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline void Office::MsoDebugOptions::PutOutputToDebugger ( VARIANT_BOOL pvarfOutputToDebugger ) {
    HRESULT _hr = put_OutputToDebugger(pvarfOutputToDebugger);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(883)
inline VARIANT_BOOL Office::MsoDebugOptions::GetOutputToFile ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OutputToFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(884)
inline void Office::MsoDebugOptions::PutOutputToFile ( VARIANT_BOOL pvarfOutputToFile ) {
    HRESULT _hr = put_OutputToFile(pvarfOutputToFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(885)
inline VARIANT_BOOL Office::MsoDebugOptions::GetOutputToMessageBox ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OutputToMessageBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(886)
inline void Office::MsoDebugOptions::PutOutputToMessageBox ( VARIANT_BOOL pvarfOutputToMessageBox ) {
    HRESULT _hr = put_OutputToMessageBox(pvarfOutputToMessageBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FileDialogSelectedItems wrapper method implementations
//

#pragma implementation_key(887)
inline IDispatchPtr Office::FileDialogSelectedItems::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(888)
inline IUnknownPtr Office::FileDialogSelectedItems::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(889)
inline long Office::FileDialogSelectedItems::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(890)
inline _bstr_t Office::FileDialogSelectedItems::Item ( int Index ) {
    BSTR _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface FileDialogFilter wrapper method implementations
//

#pragma implementation_key(891)
inline IDispatchPtr Office::FileDialogFilter::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(892)
inline _bstr_t Office::FileDialogFilter::GetExtensions ( ) {
    BSTR _result;
    HRESULT _hr = get_Extensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(893)
inline _bstr_t Office::FileDialogFilter::GetDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface FileDialogFilters wrapper method implementations
//

#pragma implementation_key(894)
inline IDispatchPtr Office::FileDialogFilters::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(895)
inline IUnknownPtr Office::FileDialogFilters::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(896)
inline long Office::FileDialogFilters::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline Office::FileDialogFilterPtr Office::FileDialogFilters::Item ( int Index ) {
    struct FileDialogFilter * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogFilterPtr(_result, false);
}

#pragma implementation_key(898)
inline HRESULT Office::FileDialogFilters::Delete ( const _variant_t & filter ) {
    HRESULT _hr = raw_Delete(filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(899)
inline HRESULT Office::FileDialogFilters::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(900)
inline Office::FileDialogFilterPtr Office::FileDialogFilters::Add ( _bstr_t Description, _bstr_t Extensions, const _variant_t & Position ) {
    struct FileDialogFilter * _result;
    HRESULT _hr = raw_Add(Description, Extensions, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogFilterPtr(_result, false);
}

//
// interface FileDialog wrapper method implementations
//

#pragma implementation_key(901)
inline IDispatchPtr Office::FileDialog::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(902)
inline Office::FileDialogFiltersPtr Office::FileDialog::GetFilters ( ) {
    struct FileDialogFilters * _result;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogFiltersPtr(_result, false);
}

#pragma implementation_key(903)
inline int Office::FileDialog::GetFilterIndex ( ) {
    int _result;
    HRESULT _hr = get_FilterIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(904)
inline void Office::FileDialog::PutFilterIndex ( int FilterIndex ) {
    HRESULT _hr = put_FilterIndex(FilterIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(905)
inline _bstr_t Office::FileDialog::GetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(906)
inline void Office::FileDialog::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(907)
inline _bstr_t Office::FileDialog::GetButtonName ( ) {
    BSTR _result;
    HRESULT _hr = get_ButtonName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(908)
inline void Office::FileDialog::PutButtonName ( _bstr_t ButtonName ) {
    HRESULT _hr = put_ButtonName(ButtonName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline VARIANT_BOOL Office::FileDialog::GetAllowMultiSelect ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowMultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(910)
inline void Office::FileDialog::PutAllowMultiSelect ( VARIANT_BOOL pvarfAllowMultiSelect ) {
    HRESULT _hr = put_AllowMultiSelect(pvarfAllowMultiSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(911)
inline enum MsoFileDialogView Office::FileDialog::GetInitialView ( ) {
    enum MsoFileDialogView _result;
    HRESULT _hr = get_InitialView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline void Office::FileDialog::PutInitialView ( enum MsoFileDialogView pinitialview ) {
    HRESULT _hr = put_InitialView(pinitialview);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(913)
inline _bstr_t Office::FileDialog::GetInitialFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_InitialFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(914)
inline void Office::FileDialog::PutInitialFileName ( _bstr_t InitialFileName ) {
    HRESULT _hr = put_InitialFileName(InitialFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(915)
inline Office::FileDialogSelectedItemsPtr Office::FileDialog::GetSelectedItems ( ) {
    struct FileDialogSelectedItems * _result;
    HRESULT _hr = get_SelectedItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogSelectedItemsPtr(_result, false);
}

#pragma implementation_key(916)
inline enum MsoFileDialogType Office::FileDialog::GetDialogType ( ) {
    enum MsoFileDialogType _result;
    HRESULT _hr = get_DialogType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(917)
inline _bstr_t Office::FileDialog::GetItem ( ) {
    BSTR _result;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(918)
inline int Office::FileDialog::Show ( ) {
    int _result;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(919)
inline HRESULT Office::FileDialog::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SignatureSet wrapper method implementations
//

#pragma implementation_key(920)
inline IUnknownPtr Office::SignatureSet::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(921)
inline int Office::SignatureSet::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(922)
inline Office::SignaturePtr Office::SignatureSet::GetItem ( int iSig ) {
    struct Signature * _result;
    HRESULT _hr = get_Item(iSig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignaturePtr(_result, false);
}

#pragma implementation_key(923)
inline Office::SignaturePtr Office::SignatureSet::Add ( ) {
    struct Signature * _result;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignaturePtr(_result, false);
}

#pragma implementation_key(924)
inline HRESULT Office::SignatureSet::Commit ( ) {
    HRESULT _hr = raw_Commit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(925)
inline IDispatchPtr Office::SignatureSet::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface Signature wrapper method implementations
//

#pragma implementation_key(926)
inline _bstr_t Office::Signature::GetSigner ( ) {
    BSTR _result;
    HRESULT _hr = get_Signer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(927)
inline _bstr_t Office::Signature::GetIssuer ( ) {
    BSTR _result;
    HRESULT _hr = get_Issuer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(928)
inline _variant_t Office::Signature::GetExpireDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExpireDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(929)
inline VARIANT_BOOL Office::Signature::GetIsValid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline VARIANT_BOOL Office::Signature::GetAttachCertificate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AttachCertificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(931)
inline void Office::Signature::PutAttachCertificate ( VARIANT_BOOL pfAttach ) {
    HRESULT _hr = put_AttachCertificate(pfAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(932)
inline HRESULT Office::Signature::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(933)
inline IDispatchPtr Office::Signature::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(934)
inline VARIANT_BOOL Office::Signature::GetIsCertificateExpired ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsCertificateExpired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(935)
inline VARIANT_BOOL Office::Signature::GetIsCertificateRevoked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsCertificateRevoked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(936)
inline _variant_t Office::Signature::GetSignDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SignDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IMsoEnvelopeVB wrapper method implementations
//

#pragma implementation_key(937)
inline _bstr_t Office::IMsoEnvelopeVB::GetIntroduction ( ) {
    BSTR _result;
    HRESULT _hr = get_Introduction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(938)
inline void Office::IMsoEnvelopeVB::PutIntroduction ( _bstr_t pbstrIntro ) {
    HRESULT _hr = put_Introduction(pbstrIntro);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(939)
inline IDispatchPtr Office::IMsoEnvelopeVB::GetItem ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(940)
inline IDispatchPtr Office::IMsoEnvelopeVB::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(941)
inline IDispatchPtr Office::IMsoEnvelopeVB::GetCommandBars ( ) {
    IDispatch * _result;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// dispinterface IMsoEnvelopeVBEvents wrapper method implementations
//

#pragma implementation_key(942)
inline HRESULT Office::IMsoEnvelopeVBEvents::EnvelopeShow ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(943)
inline HRESULT Office::IMsoEnvelopeVBEvents::EnvelopeHide ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface FileTypes wrapper method implementations
//

#pragma implementation_key(944)
inline enum MsoFileType Office::FileTypes::GetItem ( int Index ) {
    enum MsoFileType _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline int Office::FileTypes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(946)
inline HRESULT Office::FileTypes::Add ( enum MsoFileType FileType ) {
    HRESULT _hr = raw_Add(FileType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(947)
inline HRESULT Office::FileTypes::Remove ( int Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(948)
inline IUnknownPtr Office::FileTypes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface SearchFolders wrapper method implementations
//

#pragma implementation_key(949)
inline Office::ScopeFolderPtr Office::SearchFolders::GetItem ( int Index ) {
    struct ScopeFolder * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFolderPtr(_result, false);
}

#pragma implementation_key(950)
inline int Office::SearchFolders::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline HRESULT Office::SearchFolders::Add ( struct ScopeFolder * ScopeFolder ) {
    HRESULT _hr = raw_Add(ScopeFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(952)
inline HRESULT Office::SearchFolders::Remove ( int Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(953)
inline IUnknownPtr Office::SearchFolders::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ScopeFolders wrapper method implementations
//

#pragma implementation_key(954)
inline Office::ScopeFolderPtr Office::ScopeFolders::GetItem ( int Index ) {
    struct ScopeFolder * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFolderPtr(_result, false);
}

#pragma implementation_key(955)
inline int Office::ScopeFolders::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(956)
inline IUnknownPtr Office::ScopeFolders::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ScopeFolder wrapper method implementations
//

#pragma implementation_key(957)
inline _bstr_t Office::ScopeFolder::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(958)
inline _bstr_t Office::ScopeFolder::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(959)
inline Office::ScopeFoldersPtr Office::ScopeFolder::GetScopeFolders ( ) {
    struct ScopeFolders * _result;
    HRESULT _hr = get_ScopeFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFoldersPtr(_result, false);
}

#pragma implementation_key(960)
inline HRESULT Office::ScopeFolder::AddToSearchFolders ( ) {
    HRESULT _hr = raw_AddToSearchFolders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SearchScope wrapper method implementations
//

#pragma implementation_key(961)
inline enum MsoSearchIn Office::SearchScope::GetType ( ) {
    enum MsoSearchIn _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(962)
inline Office::ScopeFolderPtr Office::SearchScope::GetScopeFolder ( ) {
    struct ScopeFolder * _result;
    HRESULT _hr = get_ScopeFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFolderPtr(_result, false);
}

//
// interface SearchScopes wrapper method implementations
//

#pragma implementation_key(963)
inline Office::SearchScopePtr Office::SearchScopes::GetItem ( int Index ) {
    struct SearchScope * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchScopePtr(_result, false);
}

#pragma implementation_key(964)
inline int Office::SearchScopes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(965)
inline IUnknownPtr Office::SearchScopes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMsoDiagram wrapper method implementations
//

#pragma implementation_key(966)
inline IDispatchPtr Office::IMsoDiagram::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(967)
inline Office::DiagramNodesPtr Office::IMsoDiagram::GetNodes ( ) {
    struct DiagramNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodesPtr(_result, false);
}

#pragma implementation_key(968)
inline enum MsoDiagramType Office::IMsoDiagram::GetType ( ) {
    enum MsoDiagramType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline enum MsoTriState Office::IMsoDiagram::GetAutoLayout ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(970)
inline void Office::IMsoDiagram::PutAutoLayout ( enum MsoTriState AutoLayout ) {
    HRESULT _hr = put_AutoLayout(AutoLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(971)
inline enum MsoTriState Office::IMsoDiagram::GetReverse ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Reverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline void Office::IMsoDiagram::PutReverse ( enum MsoTriState Reverse ) {
    HRESULT _hr = put_Reverse(Reverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(973)
inline enum MsoTriState Office::IMsoDiagram::GetAutoFormat ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(974)
inline void Office::IMsoDiagram::PutAutoFormat ( enum MsoTriState AutoFormat ) {
    HRESULT _hr = put_AutoFormat(AutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(975)
inline HRESULT Office::IMsoDiagram::Convert ( enum MsoDiagramType Type ) {
    HRESULT _hr = raw_Convert(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(976)
inline HRESULT Office::IMsoDiagram::FitText ( ) {
    HRESULT _hr = raw_FitText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DiagramNodes wrapper method implementations
//

#pragma implementation_key(977)
inline IUnknownPtr Office::DiagramNodes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(978)
inline Office::DiagramNodePtr Office::DiagramNodes::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(979)
inline HRESULT Office::DiagramNodes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(980)
inline IDispatchPtr Office::DiagramNodes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(981)
inline int Office::DiagramNodes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DiagramNodeChildren wrapper method implementations
//

#pragma implementation_key(982)
inline IUnknownPtr Office::DiagramNodeChildren::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(983)
inline Office::DiagramNodePtr Office::DiagramNodeChildren::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(984)
inline Office::DiagramNodePtr Office::DiagramNodeChildren::AddNode ( const _variant_t & Index, enum MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_AddNode(Index, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(985)
inline HRESULT Office::DiagramNodeChildren::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(986)
inline IDispatchPtr Office::DiagramNodeChildren::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(987)
inline int Office::DiagramNodeChildren::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(988)
inline Office::DiagramNodePtr Office::DiagramNodeChildren::GetFirstChild ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_FirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(989)
inline Office::DiagramNodePtr Office::DiagramNodeChildren::GetLastChild ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_LastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

//
// interface DiagramNode wrapper method implementations
//

#pragma implementation_key(990)
inline Office::DiagramNodePtr Office::DiagramNode::AddNode ( enum MsoRelativeNodePosition Pos, enum MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_AddNode(Pos, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(991)
inline HRESULT Office::DiagramNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(992)
inline HRESULT Office::DiagramNode::MoveNode ( struct DiagramNode * TargetNode, enum MsoRelativeNodePosition Pos ) {
    HRESULT _hr = raw_MoveNode(TargetNode, Pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(993)
inline HRESULT Office::DiagramNode::ReplaceNode ( struct DiagramNode * TargetNode ) {
    HRESULT _hr = raw_ReplaceNode(TargetNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(994)
inline HRESULT Office::DiagramNode::SwapNode ( struct DiagramNode * TargetNode, VARIANT_BOOL SwapChildren ) {
    HRESULT _hr = raw_SwapNode(TargetNode, SwapChildren);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(995)
inline Office::DiagramNodePtr Office::DiagramNode::CloneNode ( VARIANT_BOOL CopyChildren, struct DiagramNode * TargetNode, enum MsoRelativeNodePosition Pos ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_CloneNode(CopyChildren, TargetNode, Pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(996)
inline HRESULT Office::DiagramNode::TransferChildren ( struct DiagramNode * ReceivingNode ) {
    HRESULT _hr = raw_TransferChildren(ReceivingNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(997)
inline Office::DiagramNodePtr Office::DiagramNode::NextNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_NextNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(998)
inline Office::DiagramNodePtr Office::DiagramNode::PrevNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_PrevNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(999)
inline IDispatchPtr Office::DiagramNode::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1000)
inline Office::DiagramNodeChildrenPtr Office::DiagramNode::GetChildren ( ) {
    struct DiagramNodeChildren * _result;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodeChildrenPtr(_result, false);
}

#pragma implementation_key(1001)
inline Office::ShapePtr Office::DiagramNode::GetShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1002)
inline Office::DiagramNodePtr Office::DiagramNode::GetRoot ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(1003)
inline Office::IMsoDiagramPtr Office::DiagramNode::GetDiagram ( ) {
    struct IMsoDiagram * _result;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDiagramPtr(_result, false);
}

#pragma implementation_key(1004)
inline enum MsoOrgChartLayoutType Office::DiagramNode::GetLayout ( ) {
    enum MsoOrgChartLayoutType _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1005)
inline void Office::DiagramNode::PutLayout ( enum MsoOrgChartLayoutType Type ) {
    HRESULT _hr = put_Layout(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1006)
inline Office::ShapePtr Office::DiagramNode::GetTextShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_TextShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface CanvasShapes wrapper method implementations
//

#pragma implementation_key(1007)
inline IDispatchPtr Office::CanvasShapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1008)
inline int Office::CanvasShapes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1009)
inline Office::ShapePtr Office::CanvasShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1010)
inline IUnknownPtr Office::CanvasShapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1011)
inline Office::ShapePtr Office::CanvasShapes::AddCallout ( enum MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1012)
inline Office::ShapePtr Office::CanvasShapes::AddConnector ( enum MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1013)
inline Office::ShapePtr Office::CanvasShapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1014)
inline Office::ShapePtr Office::CanvasShapes::AddLabel ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1015)
inline Office::ShapePtr Office::CanvasShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1016)
inline Office::ShapePtr Office::CanvasShapes::AddPicture ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1017)
inline Office::ShapePtr Office::CanvasShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1018)
inline Office::ShapePtr Office::CanvasShapes::AddShape ( enum MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1019)
inline Office::ShapePtr Office::CanvasShapes::AddTextEffect ( enum MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum MsoTriState FontBold, enum MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1020)
inline Office::ShapePtr Office::CanvasShapes::AddTextbox ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1021)
inline Office::FreeformBuilderPtr Office::CanvasShapes::BuildFreeform ( enum MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(1022)
inline Office::ShapeRangePtr Office::CanvasShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1023)
inline HRESULT Office::CanvasShapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1024)
inline Office::ShapePtr Office::CanvasShapes::GetBackground ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface OfficeDataSourceObject wrapper method implementations
//

#pragma implementation_key(1025)
inline _bstr_t Office::OfficeDataSourceObject::GetConnectString ( ) {
    BSTR _result;
    HRESULT _hr = get_ConnectString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1026)
inline void Office::OfficeDataSourceObject::PutConnectString ( _bstr_t pbstrConnect ) {
    HRESULT _hr = put_ConnectString(pbstrConnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1027)
inline _bstr_t Office::OfficeDataSourceObject::GetTable ( ) {
    BSTR _result;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1028)
inline void Office::OfficeDataSourceObject::PutTable ( _bstr_t pbstrTable ) {
    HRESULT _hr = put_Table(pbstrTable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline _bstr_t Office::OfficeDataSourceObject::GetDataSource ( ) {
    BSTR _result;
    HRESULT _hr = get_DataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1030)
inline void Office::OfficeDataSourceObject::PutDataSource ( _bstr_t pbstrSrc ) {
    HRESULT _hr = put_DataSource(pbstrSrc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline IDispatchPtr Office::OfficeDataSourceObject::GetColumns ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1032)
inline long Office::OfficeDataSourceObject::GetRowCount ( ) {
    long _result;
    HRESULT _hr = get_RowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1033)
inline IDispatchPtr Office::OfficeDataSourceObject::GetFilters ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1034)
inline int Office::OfficeDataSourceObject::Move ( enum MsoMoveRow MsoMoveRow, int RowNbr ) {
    int _result;
    HRESULT _hr = raw_Move(MsoMoveRow, RowNbr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1035)
inline HRESULT Office::OfficeDataSourceObject::Open ( _bstr_t bstrSrc, _bstr_t bstrConnect, _bstr_t bstrTable, long fOpenExclusive, long fNeverPrompt ) {
    HRESULT _hr = raw_Open(bstrSrc, bstrConnect, bstrTable, fOpenExclusive, fNeverPrompt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1036)
inline HRESULT Office::OfficeDataSourceObject::SetSortOrder ( _bstr_t SortField1, VARIANT_BOOL SortAscending1, _bstr_t SortField2, VARIANT_BOOL SortAscending2, _bstr_t SortField3, VARIANT_BOOL SortAscending3 ) {
    HRESULT _hr = raw_SetSortOrder(SortField1, SortAscending1, SortField2, SortAscending2, SortField3, SortAscending3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1037)
inline HRESULT Office::OfficeDataSourceObject::ApplyFilter ( ) {
    HRESULT _hr = raw_ApplyFilter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ODSOColumn wrapper method implementations
//

#pragma implementation_key(1038)
inline long Office::ODSOColumn::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1039)
inline _bstr_t Office::ODSOColumn::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1040)
inline IDispatchPtr Office::ODSOColumn::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1041)
inline _bstr_t Office::ODSOColumn::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ODSOColumns wrapper method implementations
//

#pragma implementation_key(1042)
inline long Office::ODSOColumns::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1043)
inline IDispatchPtr Office::ODSOColumns::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1044)
inline IDispatchPtr Office::ODSOColumns::Item ( const _variant_t & varIndex ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(varIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ODSOFilter wrapper method implementations
//

#pragma implementation_key(1045)
inline long Office::ODSOFilter::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1046)
inline IDispatchPtr Office::ODSOFilter::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1047)
inline _bstr_t Office::ODSOFilter::GetColumn ( ) {
    BSTR _result;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1048)
inline void Office::ODSOFilter::PutColumn ( _bstr_t pbstrCol ) {
    HRESULT _hr = put_Column(pbstrCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1049)
inline enum MsoFilterComparison Office::ODSOFilter::GetComparison ( ) {
    enum MsoFilterComparison _result;
    HRESULT _hr = get_Comparison(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1050)
inline void Office::ODSOFilter::PutComparison ( enum MsoFilterComparison pComparison ) {
    HRESULT _hr = put_Comparison(pComparison);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline _bstr_t Office::ODSOFilter::GetCompareTo ( ) {
    BSTR _result;
    HRESULT _hr = get_CompareTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1052)
inline void Office::ODSOFilter::PutCompareTo ( _bstr_t pbstrCompareTo ) {
    HRESULT _hr = put_CompareTo(pbstrCompareTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1053)
inline enum MsoFilterConjunction Office::ODSOFilter::GetConjunction ( ) {
    enum MsoFilterConjunction _result;
    HRESULT _hr = get_Conjunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1054)
inline void Office::ODSOFilter::PutConjunction ( enum MsoFilterConjunction pConjunction ) {
    HRESULT _hr = put_Conjunction(pConjunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ODSOFilters wrapper method implementations
//

#pragma implementation_key(1055)
inline long Office::ODSOFilters::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1056)
inline IDispatchPtr Office::ODSOFilters::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1057)
inline IDispatchPtr Office::ODSOFilters::Item ( long Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1058)
inline HRESULT Office::ODSOFilters::Add ( _bstr_t Column, enum MsoFilterComparison Comparison, enum MsoFilterConjunction Conjunction, _bstr_t bstrCompareTo, VARIANT_BOOL DeferUpdate ) {
    HRESULT _hr = raw_Add(Column, Comparison, Conjunction, bstrCompareTo, DeferUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1059)
inline HRESULT Office::ODSOFilters::Delete ( long Index, VARIANT_BOOL DeferUpdate ) {
    HRESULT _hr = raw_Delete(Index, DeferUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface NewFile wrapper method implementations
//

#pragma implementation_key(1060)
inline VARIANT_BOOL Office::NewFile::Add ( _bstr_t FileName, const _variant_t & Section, const _variant_t & DisplayName, const _variant_t & Action ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Add(FileName, Section, DisplayName, Action, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1061)
inline VARIANT_BOOL Office::NewFile::Remove ( _bstr_t FileName, const _variant_t & Section, const _variant_t & DisplayName, const _variant_t & Action ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Remove(FileName, Section, DisplayName, Action, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface WebComponent wrapper method implementations
//

#pragma implementation_key(1062)
inline IDispatchPtr Office::WebComponent::GetShape ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1063)
inline _bstr_t Office::WebComponent::GetURL ( ) {
    BSTR _result;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1064)
inline void Office::WebComponent::PutURL ( _bstr_t RetValue ) {
    HRESULT _hr = put_URL(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1065)
inline _bstr_t Office::WebComponent::GetHTML ( ) {
    BSTR _result;
    HRESULT _hr = get_HTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1066)
inline void Office::WebComponent::PutHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_HTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1067)
inline _bstr_t Office::WebComponent::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1068)
inline void Office::WebComponent::PutName ( _bstr_t RetValue ) {
    HRESULT _hr = put_Name(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1069)
inline long Office::WebComponent::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1070)
inline void Office::WebComponent::PutWidth ( long RetValue ) {
    HRESULT _hr = put_Width(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1071)
inline long Office::WebComponent::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1072)
inline void Office::WebComponent::PutHeight ( long RetValue ) {
    HRESULT _hr = put_Height(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1073)
inline HRESULT Office::WebComponent::SetPlaceHolderGraphic ( _bstr_t PlaceHolderGraphic ) {
    HRESULT _hr = raw_SetPlaceHolderGraphic(PlaceHolderGraphic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1074)
inline HRESULT Office::WebComponent::Commit ( ) {
    HRESULT _hr = raw_Commit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1075)
inline HRESULT Office::WebComponent::Revert ( ) {
    HRESULT _hr = raw_Revert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface WebComponentWindowExternal wrapper method implementations
//

#pragma implementation_key(1076)
inline long Office::WebComponentWindowExternal::GetInterfaceVersion ( ) {
    long _result;
    HRESULT _hr = get_InterfaceVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1077)
inline _bstr_t Office::WebComponentWindowExternal::GetApplicationName ( ) {
    BSTR _result;
    HRESULT _hr = get_ApplicationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1078)
inline long Office::WebComponentWindowExternal::GetApplicationVersion ( ) {
    long _result;
    HRESULT _hr = get_ApplicationVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1079)
inline IDispatchPtr Office::WebComponentWindowExternal::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1080)
inline HRESULT Office::WebComponentWindowExternal::CloseWindow ( ) {
    HRESULT _hr = raw_CloseWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1081)
inline Office::WebComponentPtr Office::WebComponentWindowExternal::GetWebComponent ( ) {
    struct WebComponent * _result;
    HRESULT _hr = get_WebComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebComponentPtr(_result, false);
}

//
// interface WebComponentFormat wrapper method implementations
//

#pragma implementation_key(1082)
inline IDispatchPtr Office::WebComponentFormat::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1083)
inline IDispatchPtr Office::WebComponentFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1084)
inline _bstr_t Office::WebComponentFormat::GetURL ( ) {
    BSTR _result;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1085)
inline void Office::WebComponentFormat::PutURL ( _bstr_t RetValue ) {
    HRESULT _hr = put_URL(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1086)
inline _bstr_t Office::WebComponentFormat::GetHTML ( ) {
    BSTR _result;
    HRESULT _hr = get_HTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1087)
inline void Office::WebComponentFormat::PutHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_HTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1088)
inline _bstr_t Office::WebComponentFormat::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1089)
inline void Office::WebComponentFormat::PutName ( _bstr_t RetValue ) {
    HRESULT _hr = put_Name(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1090)
inline long Office::WebComponentFormat::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1091)
inline void Office::WebComponentFormat::PutWidth ( long RetValue ) {
    HRESULT _hr = put_Width(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1092)
inline long Office::WebComponentFormat::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1093)
inline void Office::WebComponentFormat::PutHeight ( long RetValue ) {
    HRESULT _hr = put_Height(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1094)
inline _bstr_t Office::WebComponentFormat::GetPreviewGraphic ( ) {
    BSTR _result;
    HRESULT _hr = get_PreviewGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1095)
inline void Office::WebComponentFormat::PutPreviewGraphic ( _bstr_t retval ) {
    HRESULT _hr = put_PreviewGraphic(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1096)
inline HRESULT Office::WebComponentFormat::LaunchPropertiesWindow ( ) {
    HRESULT _hr = raw_LaunchPropertiesWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ILicWizExternal wrapper method implementations
//

#pragma implementation_key(1097)
inline HRESULT Office::ILicWizExternal::PrintHtmlDocument ( IUnknown * punkHtmlDoc ) {
    HRESULT _hr = raw_PrintHtmlDocument(punkHtmlDoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1098)
inline HRESULT Office::ILicWizExternal::InvokeDateTimeApplet ( ) {
    HRESULT _hr = raw_InvokeDateTimeApplet();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1099)
inline _bstr_t Office::ILicWizExternal::FormatDate ( DATE date, _bstr_t pFormat ) {
    BSTR _result;
    HRESULT _hr = raw_FormatDate(date, pFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1100)
inline HRESULT Office::ILicWizExternal::ShowHelp ( VARIANT * pvarId ) {
    HRESULT _hr = raw_ShowHelp(pvarId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1101)
inline HRESULT Office::ILicWizExternal::Terminate ( ) {
    HRESULT _hr = raw_Terminate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1102)
inline HRESULT Office::ILicWizExternal::DisableVORWReminder ( long BPC ) {
    HRESULT _hr = raw_DisableVORWReminder(BPC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1103)
inline _bstr_t Office::ILicWizExternal::SaveReceipt ( _bstr_t bstrReceipt ) {
    BSTR _result;
    HRESULT _hr = raw_SaveReceipt(bstrReceipt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1104)
inline HRESULT Office::ILicWizExternal::OpenInDefaultBrowser ( _bstr_t bstrUrl ) {
    HRESULT _hr = raw_OpenInDefaultBrowser(bstrUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1105)
inline long Office::ILicWizExternal::MsoAlert ( _bstr_t bstrText, _bstr_t bstrButtons, _bstr_t bstrIcon ) {
    long _result;
    HRESULT _hr = raw_MsoAlert(bstrText, bstrButtons, bstrIcon, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1106)
inline long Office::ILicWizExternal::DepositPidKey ( _bstr_t bstrKey, int fMORW ) {
    long _result;
    HRESULT _hr = raw_DepositPidKey(bstrKey, fMORW, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1107)
inline HRESULT Office::ILicWizExternal::WriteLog ( _bstr_t bstrMessage ) {
    HRESULT _hr = raw_WriteLog(bstrMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1108)
inline HRESULT Office::ILicWizExternal::ResignDpc ( _bstr_t bstrProductCode ) {
    HRESULT _hr = raw_ResignDpc(bstrProductCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1109)
inline HRESULT Office::ILicWizExternal::ResetPID ( ) {
    HRESULT _hr = raw_ResetPID();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1110)
inline HRESULT Office::ILicWizExternal::SetDialogSize ( long dx, long dy ) {
    HRESULT _hr = raw_SetDialogSize(dx, dy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1111)
inline long Office::ILicWizExternal::VerifyClock ( long lMode ) {
    long _result;
    HRESULT _hr = raw_VerifyClock(lMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1112)
inline HRESULT Office::ILicWizExternal::SortSelectOptions ( IDispatch * pdispSelect ) {
    HRESULT _hr = raw_SortSelectOptions(pdispSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1113)
inline HRESULT Office::ILicWizExternal::InternetDisconnect ( ) {
    HRESULT _hr = raw_InternetDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1114)
inline int Office::ILicWizExternal::GetConnectedState ( ) {
    int _result;
    HRESULT _hr = raw_GetConnectedState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1115)
inline long Office::ILicWizExternal::GetContext ( ) {
    long _result;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1116)
inline IDispatchPtr Office::ILicWizExternal::GetValidator ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Validator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1117)
inline IDispatchPtr Office::ILicWizExternal::GetLicAgent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_LicAgent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1118)
inline _bstr_t Office::ILicWizExternal::GetCountryInfo ( ) {
    BSTR _result;
    HRESULT _hr = get_CountryInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1119)
inline void Office::ILicWizExternal::PutWizardVisible ( int _arg1 ) {
    HRESULT _hr = put_WizardVisible(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1120)
inline void Office::ILicWizExternal::PutWizardTitle ( _bstr_t _arg1 ) {
    HRESULT _hr = put_WizardTitle(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1121)
inline int Office::ILicWizExternal::GetAnimationEnabled ( ) {
    int _result;
    HRESULT _hr = get_AnimationEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1122)
inline void Office::ILicWizExternal::PutCurrentHelpId ( long _arg1 ) {
    HRESULT _hr = put_CurrentHelpId(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1123)
inline _bstr_t Office::ILicWizExternal::GetOfficeOnTheWebUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_OfficeOnTheWebUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ILicValidator wrapper method implementations
//

#pragma implementation_key(1124)
inline _variant_t Office::ILicValidator::GetProducts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Products(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1125)
inline int Office::ILicValidator::GetSelection ( ) {
    int _result;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1126)
inline void Office::ILicValidator::PutSelection ( int piSel ) {
    HRESULT _hr = put_Selection(piSel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILicAgent wrapper method implementations
//

#pragma implementation_key(1127)
inline unsigned long Office::ILicAgent::Initialize ( unsigned long dwBPC, unsigned long dwMode, _bstr_t bstrLicSource ) {
    unsigned long _result;
    HRESULT _hr = raw_Initialize(dwBPC, dwMode, bstrLicSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1128)
inline _bstr_t Office::ILicAgent::GetFirstName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1129)
inline HRESULT Office::ILicAgent::SetFirstName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetFirstName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1130)
inline _bstr_t Office::ILicAgent::GetLastName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetLastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1131)
inline HRESULT Office::ILicAgent::SetLastName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetLastName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1132)
inline _bstr_t Office::ILicAgent::GetOrgName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetOrgName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1133)
inline HRESULT Office::ILicAgent::SetOrgName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetOrgName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1134)
inline _bstr_t Office::ILicAgent::GetEmail ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1135)
inline HRESULT Office::ILicAgent::SetEmail ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetEmail(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1136)
inline _bstr_t Office::ILicAgent::GetPhone ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1137)
inline HRESULT Office::ILicAgent::SetPhone ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetPhone(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1138)
inline _bstr_t Office::ILicAgent::GetAddress1 ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetAddress1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1139)
inline HRESULT Office::ILicAgent::SetAddress1 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetAddress1(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1140)
inline _bstr_t Office::ILicAgent::GetCity ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1141)
inline HRESULT Office::ILicAgent::SetCity ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetCity(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1142)
inline _bstr_t Office::ILicAgent::GetState ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1143)
inline HRESULT Office::ILicAgent::SetState ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetState(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1144)
inline _bstr_t Office::ILicAgent::GetCountryCode ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetCountryCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1145)
inline HRESULT Office::ILicAgent::SetCountryCode ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetCountryCode(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1146)
inline _bstr_t Office::ILicAgent::GetCountryDesc ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetCountryDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1147)
inline HRESULT Office::ILicAgent::SetCountryDesc ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetCountryDesc(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1148)
inline _bstr_t Office::ILicAgent::GetZip ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetZip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1149)
inline HRESULT Office::ILicAgent::SetZip ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetZip(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1150)
inline unsigned long Office::ILicAgent::GetIsoLanguage ( ) {
    unsigned long _result;
    HRESULT _hr = raw_GetIsoLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1151)
inline HRESULT Office::ILicAgent::SetIsoLanguage ( unsigned long dwNewVal ) {
    HRESULT _hr = raw_SetIsoLanguage(dwNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1152)
inline _bstr_t Office::ILicAgent::GetMSUpdate ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetMSUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1153)
inline HRESULT Office::ILicAgent::SetMSUpdate ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetMSUpdate(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1154)
inline _bstr_t Office::ILicAgent::GetMSOffer ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetMSOffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1155)
inline HRESULT Office::ILicAgent::SetMSOffer ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetMSOffer(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1156)
inline _bstr_t Office::ILicAgent::GetOtherOffer ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetOtherOffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1157)
inline HRESULT Office::ILicAgent::SetOtherOffer ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetOtherOffer(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1158)
inline _bstr_t Office::ILicAgent::GetAddress2 ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetAddress2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1159)
inline HRESULT Office::ILicAgent::SetAddress2 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetAddress2(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1160)
inline unsigned long Office::ILicAgent::CheckSystemClock ( ) {
    unsigned long _result;
    HRESULT _hr = raw_CheckSystemClock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline DATE Office::ILicAgent::GetExistingExpiryDate ( ) {
    DATE _result;
    HRESULT _hr = raw_GetExistingExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1162)
inline DATE Office::ILicAgent::GetNewExpiryDate ( ) {
    DATE _result;
    HRESULT _hr = raw_GetNewExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1163)
inline _bstr_t Office::ILicAgent::GetBillingFirstName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetBillingFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1164)
inline HRESULT Office::ILicAgent::SetBillingFirstName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingFirstName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1165)
inline _bstr_t Office::ILicAgent::GetBillingLastName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetBillingLastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1166)
inline HRESULT Office::ILicAgent::SetBillingLastName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingLastName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1167)
inline _bstr_t Office::ILicAgent::GetBillingPhone ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetBillingPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1168)
inline HRESULT Office::ILicAgent::SetBillingPhone ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingPhone(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1169)
inline _bstr_t Office::ILicAgent::GetBillingAddress1 ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetBillingAddress1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1170)
inline HRESULT Office::ILicAgent::SetBillingAddress1 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingAddress1(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1171)
inline _bstr_t Office::ILicAgent::GetBillingAddress2 ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetBillingAddress2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1172)
inline HRESULT Office::ILicAgent::SetBillingAddress2 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingAddress2(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1173)
inline _bstr_t Office::ILicAgent::GetBillingCity ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetBillingCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1174)
inline HRESULT Office::ILicAgent::SetBillingCity ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingCity(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1175)
inline _bstr_t Office::ILicAgent::GetBillingState ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetBillingState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1176)
inline HRESULT Office::ILicAgent::SetBillingState ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingState(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1177)
inline _bstr_t Office::ILicAgent::GetBillingCountryCode ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetBillingCountryCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1178)
inline HRESULT Office::ILicAgent::SetBillingCountryCode ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingCountryCode(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1179)
inline _bstr_t Office::ILicAgent::GetBillingZip ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetBillingZip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1180)
inline HRESULT Office::ILicAgent::SetBillingZip ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingZip(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1181)
inline unsigned long Office::ILicAgent::SaveBillingInfo ( int bSave ) {
    unsigned long _result;
    HRESULT _hr = raw_SaveBillingInfo(bSave, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1182)
inline int Office::ILicAgent::IsCCRenewalCountry ( _bstr_t bstrCountryCode ) {
    int _result;
    HRESULT _hr = raw_IsCCRenewalCountry(bstrCountryCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1183)
inline _bstr_t Office::ILicAgent::GetVATLabel ( _bstr_t bstrCountryCode ) {
    BSTR _result;
    HRESULT _hr = raw_GetVATLabel(bstrCountryCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1184)
inline DATE Office::ILicAgent::GetCCRenewalExpiryDate ( ) {
    DATE _result;
    HRESULT _hr = raw_GetCCRenewalExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1185)
inline HRESULT Office::ILicAgent::SetVATNumber ( _bstr_t bstrVATNumber ) {
    HRESULT _hr = raw_SetVATNumber(bstrVATNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1186)
inline HRESULT Office::ILicAgent::SetCreditCardType ( _bstr_t bstrCCCode ) {
    HRESULT _hr = raw_SetCreditCardType(bstrCCCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1187)
inline HRESULT Office::ILicAgent::SetCreditCardNumber ( _bstr_t bstrCCNumber ) {
    HRESULT _hr = raw_SetCreditCardNumber(bstrCCNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1188)
inline HRESULT Office::ILicAgent::SetCreditCardExpiryYear ( unsigned long dwCCYear ) {
    HRESULT _hr = raw_SetCreditCardExpiryYear(dwCCYear);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1189)
inline HRESULT Office::ILicAgent::SetCreditCardExpiryMonth ( unsigned long dwCCMonth ) {
    HRESULT _hr = raw_SetCreditCardExpiryMonth(dwCCMonth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1190)
inline unsigned long Office::ILicAgent::GetCreditCardCount ( ) {
    unsigned long _result;
    HRESULT _hr = raw_GetCreditCardCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1191)
inline _bstr_t Office::ILicAgent::GetCreditCardCode ( unsigned long dwIndex ) {
    BSTR _result;
    HRESULT _hr = raw_GetCreditCardCode(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1192)
inline _bstr_t Office::ILicAgent::GetCreditCardName ( unsigned long dwIndex ) {
    BSTR _result;
    HRESULT _hr = raw_GetCreditCardName(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1193)
inline _bstr_t Office::ILicAgent::GetVATNumber ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetVATNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1194)
inline _bstr_t Office::ILicAgent::GetCreditCardType ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetCreditCardType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1195)
inline _bstr_t Office::ILicAgent::GetCreditCardNumber ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetCreditCardNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1196)
inline unsigned long Office::ILicAgent::GetCreditCardExpiryYear ( ) {
    unsigned long _result;
    HRESULT _hr = raw_GetCreditCardExpiryYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1197)
inline unsigned long Office::ILicAgent::GetCreditCardExpiryMonth ( ) {
    unsigned long _result;
    HRESULT _hr = raw_GetCreditCardExpiryMonth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline int Office::ILicAgent::GetDisconnectOption ( ) {
    int _result;
    HRESULT _hr = raw_GetDisconnectOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1199)
inline HRESULT Office::ILicAgent::SetDisconnectOption ( int bNewVal ) {
    HRESULT _hr = raw_SetDisconnectOption(bNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1200)
inline HRESULT Office::ILicAgent::AsyncProcessHandshakeRequest ( int bReviseCustInfo ) {
    HRESULT _hr = raw_AsyncProcessHandshakeRequest(bReviseCustInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1201)
inline HRESULT Office::ILicAgent::AsyncProcessNewLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessNewLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1202)
inline HRESULT Office::ILicAgent::AsyncProcessReissueLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessReissueLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1203)
inline HRESULT Office::ILicAgent::AsyncProcessRetailRenewalLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessRetailRenewalLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1204)
inline HRESULT Office::ILicAgent::AsyncProcessReviseCustInfoRequest ( ) {
    HRESULT _hr = raw_AsyncProcessReviseCustInfoRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1205)
inline HRESULT Office::ILicAgent::AsyncProcessCCRenewalPriceRequest ( ) {
    HRESULT _hr = raw_AsyncProcessCCRenewalPriceRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1206)
inline HRESULT Office::ILicAgent::AsyncProcessCCRenewalLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessCCRenewalLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1207)
inline unsigned long Office::ILicAgent::GetAsyncProcessReturnCode ( ) {
    unsigned long _result;
    HRESULT _hr = raw_GetAsyncProcessReturnCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1208)
inline int Office::ILicAgent::IsUpgradeAvailable ( ) {
    int _result;
    HRESULT _hr = raw_IsUpgradeAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1209)
inline HRESULT Office::ILicAgent::WantUpgrade ( int bWantUpgrade ) {
    HRESULT _hr = raw_WantUpgrade(bWantUpgrade);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1210)
inline HRESULT Office::ILicAgent::AsyncProcessDroppedLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessDroppedLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1211)
inline _bstr_t Office::ILicAgent::GenerateInstallationId ( ) {
    BSTR _result;
    HRESULT _hr = raw_GenerateInstallationId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1212)
inline unsigned long Office::ILicAgent::DepositConfirmationId ( _bstr_t bstrVal ) {
    unsigned long _result;
    HRESULT _hr = raw_DepositConfirmationId(bstrVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1213)
inline int Office::ILicAgent::VerifyCheckDigits ( _bstr_t bstrCIDIID ) {
    int _result;
    HRESULT _hr = raw_VerifyCheckDigits(bstrCIDIID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1214)
inline DATE Office::ILicAgent::GetCurrentExpiryDate ( ) {
    DATE _result;
    HRESULT _hr = raw_GetCurrentExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1215)
inline HRESULT Office::ILicAgent::CancelAsyncProcessRequest ( int bIsLicenseRequest ) {
    HRESULT _hr = raw_CancelAsyncProcessRequest(bIsLicenseRequest);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1216)
inline _bstr_t Office::ILicAgent::GetCurrencyDescription ( unsigned long dwCurrencyIndex ) {
    BSTR _result;
    HRESULT _hr = raw_GetCurrencyDescription(dwCurrencyIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1217)
inline unsigned long Office::ILicAgent::GetPriceItemCount ( ) {
    unsigned long _result;
    HRESULT _hr = raw_GetPriceItemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1218)
inline _bstr_t Office::ILicAgent::GetPriceItemLabel ( unsigned long dwIndex ) {
    BSTR _result;
    HRESULT _hr = raw_GetPriceItemLabel(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1219)
inline _bstr_t Office::ILicAgent::GetPriceItemValue ( unsigned long dwCurrencyIndex, unsigned long dwIndex ) {
    BSTR _result;
    HRESULT _hr = raw_GetPriceItemValue(dwCurrencyIndex, dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1220)
inline _bstr_t Office::ILicAgent::GetInvoiceText ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetInvoiceText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1221)
inline _bstr_t Office::ILicAgent::GetBackendErrorMsg ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetBackendErrorMsg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1222)
inline unsigned long Office::ILicAgent::GetCurrencyOption ( ) {
    unsigned long _result;
    HRESULT _hr = raw_GetCurrencyOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1223)
inline HRESULT Office::ILicAgent::SetCurrencyOption ( unsigned long dwCurrencyOption ) {
    HRESULT _hr = raw_SetCurrencyOption(dwCurrencyOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1224)
inline _bstr_t Office::ILicAgent::GetEndOfLifeHtmlText ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetEndOfLifeHtmlText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1225)
inline unsigned long Office::ILicAgent::DisplaySSLCert ( ) {
    unsigned long _result;
    HRESULT _hr = raw_DisplaySSLCert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoEServicesDialog wrapper method implementations
//

#pragma implementation_key(1226)
inline HRESULT Office::IMsoEServicesDialog::Close ( VARIANT_BOOL ApplyWebComponentChanges ) {
    HRESULT _hr = raw_Close(ApplyWebComponentChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1227)
inline HRESULT Office::IMsoEServicesDialog::AddTrustedDomain ( _bstr_t Domain ) {
    HRESULT _hr = raw_AddTrustedDomain(Domain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1228)
inline _bstr_t Office::IMsoEServicesDialog::GetApplicationName ( ) {
    BSTR _result;
    HRESULT _hr = get_ApplicationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1229)
inline IDispatchPtr Office::IMsoEServicesDialog::GetApplication ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1230)
inline IDispatchPtr Office::IMsoEServicesDialog::GetWebComponent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_WebComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1231)
inline IDispatchPtr Office::IMsoEServicesDialog::GetClipArt ( ) {
    IDispatch * _result;
    HRESULT _hr = get_ClipArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface WebComponentProperties wrapper method implementations
//

#pragma implementation_key(1232)
inline IDispatchPtr Office::WebComponentProperties::GetShape ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1233)
inline _bstr_t Office::WebComponentProperties::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1234)
inline void Office::WebComponentProperties::PutName ( _bstr_t RetValue ) {
    HRESULT _hr = put_Name(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1235)
inline _bstr_t Office::WebComponentProperties::GetURL ( ) {
    BSTR _result;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1236)
inline void Office::WebComponentProperties::PutURL ( _bstr_t RetValue ) {
    HRESULT _hr = put_URL(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1237)
inline _bstr_t Office::WebComponentProperties::GetHTML ( ) {
    BSTR _result;
    HRESULT _hr = get_HTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1238)
inline void Office::WebComponentProperties::PutHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_HTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1239)
inline _bstr_t Office::WebComponentProperties::GetPreviewGraphic ( ) {
    BSTR _result;
    HRESULT _hr = get_PreviewGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1240)
inline void Office::WebComponentProperties::PutPreviewGraphic ( _bstr_t RetValue ) {
    HRESULT _hr = put_PreviewGraphic(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1241)
inline _bstr_t Office::WebComponentProperties::GetPreviewHTML ( ) {
    BSTR _result;
    HRESULT _hr = get_PreviewHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1242)
inline void Office::WebComponentProperties::PutPreviewHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_PreviewHTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1243)
inline long Office::WebComponentProperties::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1244)
inline void Office::WebComponentProperties::PutWidth ( long RetValue ) {
    HRESULT _hr = put_Width(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1245)
inline long Office::WebComponentProperties::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline void Office::WebComponentProperties::PutHeight ( long RetValue ) {
    HRESULT _hr = put_Height(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1247)
inline _bstr_t Office::WebComponentProperties::GetTag ( ) {
    BSTR _result;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1248)
inline void Office::WebComponentProperties::PutTag ( _bstr_t RetValue ) {
    HRESULT _hr = put_Tag(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SmartDocument wrapper method implementations
//

#pragma implementation_key(1249)
inline _bstr_t Office::SmartDocument::GetSolutionID ( ) {
    BSTR _result;
    HRESULT _hr = get_SolutionID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1250)
inline void Office::SmartDocument::PutSolutionID ( _bstr_t pbstrID ) {
    HRESULT _hr = put_SolutionID(pbstrID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1251)
inline _bstr_t Office::SmartDocument::GetSolutionURL ( ) {
    BSTR _result;
    HRESULT _hr = get_SolutionURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1252)
inline void Office::SmartDocument::PutSolutionURL ( _bstr_t pbstrUrl ) {
    HRESULT _hr = put_SolutionURL(pbstrUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1253)
inline HRESULT Office::SmartDocument::PickSolution ( VARIANT_BOOL ConsiderAllSchemas ) {
    HRESULT _hr = raw_PickSolution(ConsiderAllSchemas);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1254)
inline HRESULT Office::SmartDocument::RefreshPane ( ) {
    HRESULT _hr = raw_RefreshPane();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SharedWorkspaceMember wrapper method implementations
//

#pragma implementation_key(1255)
inline _bstr_t Office::SharedWorkspaceMember::GetDomainName ( ) {
    BSTR _result;
    HRESULT _hr = get_DomainName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1256)
inline _bstr_t Office::SharedWorkspaceMember::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1257)
inline _bstr_t Office::SharedWorkspaceMember::GetEmail ( ) {
    BSTR _result;
    HRESULT _hr = get_Email(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1258)
inline HRESULT Office::SharedWorkspaceMember::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1259)
inline _bstr_t Office::SharedWorkspaceMember::GetId ( ) {
    BSTR _result;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1260)
inline IDispatchPtr Office::SharedWorkspaceMember::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceMembers wrapper method implementations
//

#pragma implementation_key(1261)
inline IUnknownPtr Office::SharedWorkspaceMembers::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1262)
inline Office::SharedWorkspaceMemberPtr Office::SharedWorkspaceMembers::GetItem ( int Index ) {
    struct SharedWorkspaceMember * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceMemberPtr(_result, false);
}

#pragma implementation_key(1263)
inline int Office::SharedWorkspaceMembers::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1264)
inline Office::SharedWorkspaceMemberPtr Office::SharedWorkspaceMembers::Add ( _bstr_t Email, _bstr_t DomainName, _bstr_t DisplayName, const _variant_t & Role ) {
    struct SharedWorkspaceMember * _result;
    HRESULT _hr = raw_Add(Email, DomainName, DisplayName, Role, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceMemberPtr(_result, false);
}

#pragma implementation_key(1265)
inline IDispatchPtr Office::SharedWorkspaceMembers::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1266)
inline VARIANT_BOOL Office::SharedWorkspaceMembers::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspaceTask wrapper method implementations
//

#pragma implementation_key(1267)
inline _bstr_t Office::SharedWorkspaceTask::GetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1268)
inline void Office::SharedWorkspaceTask::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1269)
inline _bstr_t Office::SharedWorkspaceTask::GetAssignedTo ( ) {
    BSTR _result;
    HRESULT _hr = get_AssignedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1270)
inline void Office::SharedWorkspaceTask::PutAssignedTo ( _bstr_t AssignedTo ) {
    HRESULT _hr = put_AssignedTo(AssignedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1271)
inline enum MsoSharedWorkspaceTaskStatus Office::SharedWorkspaceTask::GetStatus ( ) {
    enum MsoSharedWorkspaceTaskStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1272)
inline void Office::SharedWorkspaceTask::PutStatus ( enum MsoSharedWorkspaceTaskStatus Status ) {
    HRESULT _hr = put_Status(Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1273)
inline enum MsoSharedWorkspaceTaskPriority Office::SharedWorkspaceTask::GetPriority ( ) {
    enum MsoSharedWorkspaceTaskPriority _result;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1274)
inline void Office::SharedWorkspaceTask::PutPriority ( enum MsoSharedWorkspaceTaskPriority Priority ) {
    HRESULT _hr = put_Priority(Priority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1275)
inline _bstr_t Office::SharedWorkspaceTask::GetDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1276)
inline void Office::SharedWorkspaceTask::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1277)
inline _variant_t Office::SharedWorkspaceTask::GetDueDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1278)
inline void Office::SharedWorkspaceTask::PutDueDate ( const _variant_t & DueDate ) {
    HRESULT _hr = put_DueDate(DueDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1279)
inline _bstr_t Office::SharedWorkspaceTask::GetCreatedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1280)
inline _variant_t Office::SharedWorkspaceTask::GetCreatedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1281)
inline _bstr_t Office::SharedWorkspaceTask::GetModifiedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1282)
inline _variant_t Office::SharedWorkspaceTask::GetModifiedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModifiedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1283)
inline HRESULT Office::SharedWorkspaceTask::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1284)
inline HRESULT Office::SharedWorkspaceTask::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1285)
inline IDispatchPtr Office::SharedWorkspaceTask::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceTasks wrapper method implementations
//

#pragma implementation_key(1286)
inline Office::SharedWorkspaceTaskPtr Office::SharedWorkspaceTasks::GetItem ( int Index ) {
    struct SharedWorkspaceTask * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceTaskPtr(_result, false);
}

#pragma implementation_key(1287)
inline int Office::SharedWorkspaceTasks::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1288)
inline Office::SharedWorkspaceTaskPtr Office::SharedWorkspaceTasks::Add ( _bstr_t Title, const _variant_t & Status, const _variant_t & Priority, const _variant_t & Assignee, const _variant_t & Description, const _variant_t & DueDate ) {
    struct SharedWorkspaceTask * _result;
    HRESULT _hr = raw_Add(Title, Status, Priority, Assignee, Description, DueDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceTaskPtr(_result, false);
}

#pragma implementation_key(1289)
inline IDispatchPtr Office::SharedWorkspaceTasks::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1290)
inline VARIANT_BOOL Office::SharedWorkspaceTasks::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1291)
inline IUnknownPtr Office::SharedWorkspaceTasks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface SharedWorkspaceFile wrapper method implementations
//

#pragma implementation_key(1292)
inline _bstr_t Office::SharedWorkspaceFile::GetURL ( ) {
    BSTR _result;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1293)
inline _bstr_t Office::SharedWorkspaceFile::GetCreatedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1294)
inline _variant_t Office::SharedWorkspaceFile::GetCreatedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1295)
inline _bstr_t Office::SharedWorkspaceFile::GetModifiedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1296)
inline _variant_t Office::SharedWorkspaceFile::GetModifiedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModifiedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1297)
inline HRESULT Office::SharedWorkspaceFile::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1298)
inline IDispatchPtr Office::SharedWorkspaceFile::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceFiles wrapper method implementations
//

#pragma implementation_key(1299)
inline IUnknownPtr Office::SharedWorkspaceFiles::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1300)
inline Office::SharedWorkspaceFilePtr Office::SharedWorkspaceFiles::GetItem ( int Index ) {
    struct SharedWorkspaceFile * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFilePtr(_result, false);
}

#pragma implementation_key(1301)
inline int Office::SharedWorkspaceFiles::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline Office::SharedWorkspaceFilePtr Office::SharedWorkspaceFiles::Add ( _bstr_t FileName, const _variant_t & ParentFolder, const _variant_t & OverwriteIfFileAlreadyExists, const _variant_t & KeepInSync ) {
    struct SharedWorkspaceFile * _result;
    HRESULT _hr = raw_Add(FileName, ParentFolder, OverwriteIfFileAlreadyExists, KeepInSync, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFilePtr(_result, false);
}

#pragma implementation_key(1303)
inline IDispatchPtr Office::SharedWorkspaceFiles::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1304)
inline VARIANT_BOOL Office::SharedWorkspaceFiles::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspaceFolder wrapper method implementations
//

#pragma implementation_key(1305)
inline _bstr_t Office::SharedWorkspaceFolder::GetFolderName ( ) {
    BSTR _result;
    HRESULT _hr = get_FolderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1306)
inline HRESULT Office::SharedWorkspaceFolder::Delete ( const _variant_t & DeleteEventIfFolderContainsFiles ) {
    HRESULT _hr = raw_Delete(DeleteEventIfFolderContainsFiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1307)
inline IDispatchPtr Office::SharedWorkspaceFolder::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceFolders wrapper method implementations
//

#pragma implementation_key(1308)
inline IUnknownPtr Office::SharedWorkspaceFolders::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1309)
inline Office::SharedWorkspaceFolderPtr Office::SharedWorkspaceFolders::GetItem ( int Index ) {
    struct SharedWorkspaceFolder * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFolderPtr(_result, false);
}

#pragma implementation_key(1310)
inline int Office::SharedWorkspaceFolders::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1311)
inline Office::SharedWorkspaceFolderPtr Office::SharedWorkspaceFolders::Add ( _bstr_t FolderName, const _variant_t & ParentFolder ) {
    struct SharedWorkspaceFolder * _result;
    HRESULT _hr = raw_Add(FolderName, ParentFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFolderPtr(_result, false);
}

#pragma implementation_key(1312)
inline IDispatchPtr Office::SharedWorkspaceFolders::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1313)
inline VARIANT_BOOL Office::SharedWorkspaceFolders::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspaceLink wrapper method implementations
//

#pragma implementation_key(1314)
inline _bstr_t Office::SharedWorkspaceLink::GetURL ( ) {
    BSTR _result;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1315)
inline void Office::SharedWorkspaceLink::PutURL ( _bstr_t URL ) {
    HRESULT _hr = put_URL(URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1316)
inline _bstr_t Office::SharedWorkspaceLink::GetDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1317)
inline void Office::SharedWorkspaceLink::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1318)
inline _bstr_t Office::SharedWorkspaceLink::GetNotes ( ) {
    BSTR _result;
    HRESULT _hr = get_Notes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1319)
inline void Office::SharedWorkspaceLink::PutNotes ( _bstr_t Notes ) {
    HRESULT _hr = put_Notes(Notes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1320)
inline _bstr_t Office::SharedWorkspaceLink::GetCreatedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1321)
inline _variant_t Office::SharedWorkspaceLink::GetCreatedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1322)
inline _bstr_t Office::SharedWorkspaceLink::GetModifiedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1323)
inline _variant_t Office::SharedWorkspaceLink::GetModifiedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModifiedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1324)
inline HRESULT Office::SharedWorkspaceLink::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1325)
inline HRESULT Office::SharedWorkspaceLink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1326)
inline IDispatchPtr Office::SharedWorkspaceLink::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceLinks wrapper method implementations
//

#pragma implementation_key(1327)
inline IUnknownPtr Office::SharedWorkspaceLinks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1328)
inline Office::SharedWorkspaceLinkPtr Office::SharedWorkspaceLinks::GetItem ( int Index ) {
    struct SharedWorkspaceLink * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceLinkPtr(_result, false);
}

#pragma implementation_key(1329)
inline int Office::SharedWorkspaceLinks::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1330)
inline Office::SharedWorkspaceLinkPtr Office::SharedWorkspaceLinks::Add ( _bstr_t URL, const _variant_t & Description, const _variant_t & Notes ) {
    struct SharedWorkspaceLink * _result;
    HRESULT _hr = raw_Add(URL, Description, Notes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceLinkPtr(_result, false);
}

#pragma implementation_key(1331)
inline IDispatchPtr Office::SharedWorkspaceLinks::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1332)
inline VARIANT_BOOL Office::SharedWorkspaceLinks::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspace wrapper method implementations
//

#pragma implementation_key(1333)
inline _bstr_t Office::SharedWorkspace::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1334)
inline void Office::SharedWorkspace::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1335)
inline Office::SharedWorkspaceMembersPtr Office::SharedWorkspace::GetMembers ( ) {
    struct SharedWorkspaceMembers * _result;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceMembersPtr(_result, false);
}

#pragma implementation_key(1336)
inline Office::SharedWorkspaceTasksPtr Office::SharedWorkspace::GetTasks ( ) {
    struct SharedWorkspaceTasks * _result;
    HRESULT _hr = get_Tasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceTasksPtr(_result, false);
}

#pragma implementation_key(1337)
inline Office::SharedWorkspaceFilesPtr Office::SharedWorkspace::GetFiles ( ) {
    struct SharedWorkspaceFiles * _result;
    HRESULT _hr = get_Files(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFilesPtr(_result, false);
}

#pragma implementation_key(1338)
inline Office::SharedWorkspaceFoldersPtr Office::SharedWorkspace::GetFolders ( ) {
    struct SharedWorkspaceFolders * _result;
    HRESULT _hr = get_Folders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFoldersPtr(_result, false);
}

#pragma implementation_key(1339)
inline Office::SharedWorkspaceLinksPtr Office::SharedWorkspace::GetLinks ( ) {
    struct SharedWorkspaceLinks * _result;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceLinksPtr(_result, false);
}

#pragma implementation_key(1340)
inline HRESULT Office::SharedWorkspace::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1341)
inline HRESULT Office::SharedWorkspace::CreateNew ( const _variant_t & URL, const _variant_t & Name ) {
    HRESULT _hr = raw_CreateNew(URL, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1342)
inline HRESULT Office::SharedWorkspace::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1343)
inline IDispatchPtr Office::SharedWorkspace::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1344)
inline _bstr_t Office::SharedWorkspace::GetURL ( ) {
    BSTR _result;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1345)
inline VARIANT_BOOL Office::SharedWorkspace::GetConnected ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Connected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1346)
inline _variant_t Office::SharedWorkspace::GetLastRefreshed ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LastRefreshed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1347)
inline _bstr_t Office::SharedWorkspace::GetSourceURL ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1348)
inline void Office::SharedWorkspace::PutSourceURL ( _bstr_t pbstrSourceURL ) {
    HRESULT _hr = put_SourceURL(pbstrSourceURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1349)
inline HRESULT Office::SharedWorkspace::RemoveDocument ( ) {
    HRESULT _hr = raw_RemoveDocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1350)
inline HRESULT Office::SharedWorkspace::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Sync wrapper method implementations
//

#pragma implementation_key(1351)
inline enum MsoSyncStatusType Office::Sync::GetStatus ( ) {
    enum MsoSyncStatusType _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1352)
inline _bstr_t Office::Sync::GetWorkspaceLastChangedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_WorkspaceLastChangedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1353)
inline _variant_t Office::Sync::GetLastSyncTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LastSyncTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1354)
inline enum MsoSyncErrorType Office::Sync::GetErrorType ( ) {
    enum MsoSyncErrorType _result;
    HRESULT _hr = get_ErrorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1355)
inline HRESULT Office::Sync::GetUpdate ( ) {
    HRESULT _hr = raw_GetUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1356)
inline HRESULT Office::Sync::PutUpdate ( ) {
    HRESULT _hr = raw_PutUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1357)
inline HRESULT Office::Sync::OpenVersion ( enum MsoSyncVersionType SyncVersionType ) {
    HRESULT _hr = raw_OpenVersion(SyncVersionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1358)
inline HRESULT Office::Sync::ResolveConflict ( enum MsoSyncConflictResolutionType SyncConflictResolution ) {
    HRESULT _hr = raw_ResolveConflict(SyncConflictResolution);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1359)
inline HRESULT Office::Sync::Unsuspend ( ) {
    HRESULT _hr = raw_Unsuspend();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1360)
inline IDispatchPtr Office::Sync::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DocumentLibraryVersion wrapper method implementations
//

#pragma implementation_key(1361)
inline _variant_t Office::DocumentLibraryVersion::GetModified ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Modified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1362)
inline long Office::DocumentLibraryVersion::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1363)
inline IDispatchPtr Office::DocumentLibraryVersion::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1364)
inline _bstr_t Office::DocumentLibraryVersion::GetModifiedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1365)
inline _bstr_t Office::DocumentLibraryVersion::GetComments ( ) {
    BSTR _result;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1366)
inline HRESULT Office::DocumentLibraryVersion::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1367)
inline IDispatchPtr Office::DocumentLibraryVersion::Open ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1368)
inline IDispatchPtr Office::DocumentLibraryVersion::Restore ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Restore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DocumentLibraryVersions wrapper method implementations
//

#pragma implementation_key(1369)
inline Office::DocumentLibraryVersionPtr Office::DocumentLibraryVersions::GetItem ( long lIndex ) {
    struct DocumentLibraryVersion * _result;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentLibraryVersionPtr(_result, false);
}

#pragma implementation_key(1370)
inline long Office::DocumentLibraryVersions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1371)
inline IDispatchPtr Office::DocumentLibraryVersions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1372)
inline VARIANT_BOOL Office::DocumentLibraryVersions::GetIsVersioningEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsVersioningEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1373)
inline IUnknownPtr Office::DocumentLibraryVersions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface UserPermission wrapper method implementations
//

#pragma implementation_key(1374)
inline _bstr_t Office::UserPermission::GetUserId ( ) {
    BSTR _result;
    HRESULT _hr = get_UserId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1375)
inline long Office::UserPermission::GetPermission ( ) {
    long _result;
    HRESULT _hr = get_Permission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1376)
inline void Office::UserPermission::PutPermission ( long Permission ) {
    HRESULT _hr = put_Permission(Permission);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1377)
inline _variant_t Office::UserPermission::GetExpirationDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExpirationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1378)
inline void Office::UserPermission::PutExpirationDate ( const _variant_t & ExpirationDate ) {
    HRESULT _hr = put_ExpirationDate(ExpirationDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1379)
inline IDispatchPtr Office::UserPermission::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1380)
inline HRESULT Office::UserPermission::Remove ( ) {
    HRESULT _hr = raw_Remove();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Permission wrapper method implementations
//

#pragma implementation_key(1381)
inline Office::UserPermissionPtr Office::Permission::GetItem ( const _variant_t & Index ) {
    struct UserPermission * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPermissionPtr(_result, false);
}

#pragma implementation_key(1382)
inline long Office::Permission::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1383)
inline VARIANT_BOOL Office::Permission::GetEnableTrustedBrowser ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableTrustedBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1384)
inline void Office::Permission::PutEnableTrustedBrowser ( VARIANT_BOOL Enable ) {
    HRESULT _hr = put_EnableTrustedBrowser(Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1385)
inline Office::UserPermissionPtr Office::Permission::Add ( _bstr_t UserId, const _variant_t & Permission, const _variant_t & ExpirationDate ) {
    struct UserPermission * _result;
    HRESULT _hr = raw_Add(UserId, Permission, ExpirationDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPermissionPtr(_result, false);
}

#pragma implementation_key(1386)
inline HRESULT Office::Permission::ApplyPolicy ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyPolicy(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1387)
inline IDispatchPtr Office::Permission::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1388)
inline HRESULT Office::Permission::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1389)
inline VARIANT_BOOL Office::Permission::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1390)
inline void Office::Permission::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1391)
inline _bstr_t Office::Permission::GetRequestPermissionURL ( ) {
    BSTR _result;
    HRESULT _hr = get_RequestPermissionURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1392)
inline void Office::Permission::PutRequestPermissionURL ( _bstr_t Contact ) {
    HRESULT _hr = put_RequestPermissionURL(Contact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1393)
inline _bstr_t Office::Permission::GetPolicyName ( ) {
    BSTR _result;
    HRESULT _hr = get_PolicyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1394)
inline _bstr_t Office::Permission::GetPolicyDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_PolicyDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1395)
inline VARIANT_BOOL Office::Permission::GetStoreLicenses ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_StoreLicenses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1396)
inline void Office::Permission::PutStoreLicenses ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_StoreLicenses(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1397)
inline _bstr_t Office::Permission::GetDocumentAuthor ( ) {
    BSTR _result;
    HRESULT _hr = get_DocumentAuthor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1398)
inline void Office::Permission::PutDocumentAuthor ( _bstr_t Author ) {
    HRESULT _hr = put_DocumentAuthor(Author);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1399)
inline VARIANT_BOOL Office::Permission::GetPermissionFromPolicy ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PermissionFromPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1400)
inline IUnknownPtr Office::Permission::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}
